{"repository_name":"base58","body":"![Base58 CI](https://img.shields.io/github/actions/workflow/status/wyhaines/base58.cr/ci.yml?branch=main&logo=GitHub)\n[![GitHub release](https://img.shields.io/github/release/wyhaines/base58.cr.svg?style=for-the-badge)](https://github.com/wyhaines/base58.cr/releases)\n![GitHub commits since latest release (by SemVer)](https://img.shields.io/github/commits-since/wyhaines/base58.cr/latest?style=for-the-badge)\n\n\n# base58\n\nThis library provides a very fast implementation of Base58 encoding and decoding for Crystal. It supports the Bitcoin Base58 alphabet, which is the default alphabet, as well as the Flickr alphabet, the Ripple alphabet, and the Minero alphabet/encoding-variation. It also supports both Base58Check and CB58 checksum algorithms.\n\n## Benchmarks\n\nA benchmark is provided in the [benchmark/](https://github.com/wyhaines/base58.cr/tree/main/benchmark) directory. To build it and then run it:\n\n```bash\ncd benchmark\nshards build --release\nbin/benchmark\n```\n\nIt will run \n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     base58:\n       github: wyhaines/base58\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"base58\"\n```\n\nThe `encode` and `decode` methods should operate off of just about any sensible input, and can return most output types that a person may want. To encode into Base58, the basic form is this:\n\n```crystal\nBase58.encode(\"Hello, World!\")\n```\n\nThis will return the Base58 version of `Hello, World!` as a `String`.\n\nYou might want that value returned as a `Slice(UInt8)` instead:\n\n```crystal\nBase58.encode(\"Hello, World!\", into: Slice(UInt8))\n```\n\nIf you have an existing `Slice(UInt8)` that you are using as a reusable buffer, you can use that, too:\n\n```crystal\nbuffer = Slice(UInt8).new(100)\nBase58.encode(\"Hello, World!\", into: buffer)\n```\n\nOr maybe you have a `Slice(UInt8)` of bytes to encode, and you want to encode them into a `StringBuffer`.\n\n```crystal\nbuffer = Slice(UInt8).new(100)\n# Stuff happens to get data into `buffer`.\nBase58.encode(buffer, into: StringBuffer)\n```\n\nDecoding works in the same way, with the same flexibility.\n\nSo, perhaps you have received a Base58 encoded piece of data into a StringBuffer, and want to decode it into another, already-existing StringBuffer:\n\n```crystal\ndecoded_buffer = StringBuffer.new(256)\n\n# receive data into `recv_buffer`\n\nBase58.decode(recv_buffer, into: decoded_buffer)\n```\n\n### Alphabets\n\nThere are four supported alphabets. These are the Bitcoin alphabet, the Flickr alphabet, the Ripple alphabet, and the Monero alphabet. Of these, all are encoded and decoded the same except for the Monero alphabet, which for encoding operates on blocks of 8 bytes, padding to 11 bytes, except for the final block. For decoding, it operates on blocks of 11 bytes, returning 8 bytes of decoded data, except for the final block which can be smaller. For the other three alphabets, the final size of the encoded data is variable, but the Monero encoding ensures a consistent final size. Thus, Monero addresses, which are 69 bytes of data, always encode to 95 byte Base58 strings.\n\nThe bitcoin alphabet is the default. To use another alphabet, pass the class of the alphabet as an argument:\n\n```crystal\nBase58.encode(\"Hello, World!\", into: Slice(UInt8), alphabet: Base58::Alphabet::Monero)\n```\n\nAlphabets support both forward and inverse lookup. Thus, the following will return the original character:\n\n```crystal\nBase58::Alphabet::Bitcoin.inverse(Base58::Alphabet::Bitcoin['a'.ord]).chr\n```\n\nThe alphabets encode the ASCII codes for the characters, since Base58 alphabets all utilize single byte ASCII characters. Thus, to lookup a `Char`, it has to be cast to a `UInt8` first.\n\nNil-returning variants of both forward and backward lookups are also supported:\n\n```crystal\nBase58::Alphabet::Bitcoin.inverse?(Base58::Alphabet::Bitcoin[some_UTF8_character]?)\n```\n\nIf the character is not found in the alphabet, the forward lookup, via `#[]`, will return an exception, but if called via `#[]?`, `nil` will be returned if it is not found. The inverse lookup returns a `0` for any ASCII character code that is not found in the alphabet when called with `#inverse`, and an exception for any non-ASCII character code. When called with `inverse?`, it returns nil for any code that is not found in the alphabet, ASCII or not.  \n\n### Alternative, method chaining based syntax.\n\nThere is an alternative syntax that is supported, though it should be considered to be an experiment. I don't know if I will keep this support as it needs some work to be really transparently usable. Right now `.as(TYPE)` annotations are needed because I have not fleshed out the implementation. If you feel inspired, and want to offer a PR to help make this better, I would be appreciative.\n\n```crystal\nBase58::Encoder.into(String).encode(\"some text\").as(String)\n\nbuffer = StringBuffer.new(256)\nBase58::Decoder.into(buffer).decode(some_encoded_thing)\n\nas_slice = Base58::Encoder.into(Slice(UInt8)).encode(\"some text).as(Slice(UInt8))\n```\n\n## Crystal Extensions and Other Goodies\n\nThere are several extensions to Crystal that are bundled into this library pending submitting them as pull requests to Crystal itself.\n\n### Char.static_array\n\nThe number types, such as UInt8, have a macro defined on them to facilitate the creation of a prepopulated StaticArray, [static_array](https://crystal-lang.org/api/1.7.1/Number.html#static_array%28%2Anums%29-macro). This extension adds the same macro to `Char`.\n\n\n### Slice#to_unsafe\n\nThis adds a method to a `Slice` that returns a pointer to the first element of the slice. \n\n### String.static_array\n\nThe number types, such as UInt8, have a macro defined on them to facilitate the creation of a prepopulated StaticArray, [static_array](https://crystal-lang.org/api/1.7.1/Number.html#static_array%28%2Anums%29-macro). This extension adds the same macro to `String`.\n\n### String#new(string : String)\n\nThis creates a dynamically allocated string, even when passed a string literal. While this is not something that one normally wants, there are times when you want to ensure that a _new_ object, with a new section of memory backing it, is created for a given string literal. This will guarantee that.\n\n### String#new(size : Int)\n\nThis is a simple helper that creates an empty string in the requested size. This may seem\nuseless, as Crystal Strings are immutable. However, this can be useful if you want to say \"Not today!\" to the god of Immutability and mutate an immutable String as a very very handy buffer with a maximum fixed size.\n\n### StringBuffer\n\nImagine that you want to take some data that is stuffed into a piece of memory, and you want to be able to treat it as a String, doing all the normal String things. But you\nwant it to be as fast as possible because you are going to be doing this a lot.\n\nSay \"Hello\" to StringBuffer. It is a thin wrapper around a String, and it forwards any unknown method calls to the String that it carries in an instance variable, so it generally behaves like a String. However, it defines a `#mutate` method that can be called to _change_ the value of the underlying String, with some limits.\n\nNothing can be stored in a StringBuffer that is larger than the original capacity of the StringBuffer. However, anything the same size or smaller can be inserted into the String, replacing the previous contents.\n\n\n\n## Development\n\nThe goals are to have a clear, capable, and easy to use API that sits above an implementation that is the fastest available for Crystal, and that is performance competitive with Rust.\n\nInternals cleanups or optimizations are welcome, as are any bug fixes or improved documentation.\n\n## Contributing\n\n1. Fork it (<https://github.com/wyhaines/base58/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Kirk Haines](https://github.com/wyhaines) - creator and maintainer\n\n![GitHub code size in bytes](https://img.shields.io/github/languages/code-size/wyhaines/base58.cr?style=for-the-badge)\n![GitHub issues](https://img.shields.io/github/issues/wyhaines/base58.cr?style=for-the-badge)","program":{"html_id":"base58/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"base58","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"base58/Base58","path":"Base58.html","kind":"module","full_name":"Base58","name":"Base58","abstract":false,"locations":[{"filename":"src/base58.cr","line_number":8,"url":null},{"filename":"src/base58/alphabet.cr","line_number":1,"url":null},{"filename":"src/base58/alphabet/bitcoin.cr","line_number":3,"url":null},{"filename":"src/base58/alphabet/flickr.cr","line_number":3,"url":null},{"filename":"src/base58/alphabet/ipfs.cr","line_number":3,"url":null},{"filename":"src/base58/alphabet/monero.cr","line_number":3,"url":null},{"filename":"src/base58/alphabet/ripple.cr","line_number":3,"url":null},{"filename":"src/base58/decoder.cr","line_number":7,"url":null},{"filename":"src/base58/encoder.cr","line_number":7,"url":null},{"filename":"src/base58/pointer_collection.cr","line_number":1,"url":null},{"filename":"src/base58/version.cr","line_number":2,"url":null}],"repository_name":"base58","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"SizeLookup","name":"SizeLookup","value":"begin\n  Int32.static_array(0, 3.365658237309761.to_u32, 4.731316474619522.to_u32, 6.096974711929283.to_u32, 7.462632949239044.to_u32, 8.828291186548805.to_u32, 10.193949423858566.to_u32, 11.559607661168327.to_u32, 12.925265898478088.to_u32, 14.290924135787849.to_u32, 15.65658237309761.to_u32, 17.022240610407373.to_u32, 18.387898847717132.to_u32, 19.75355708502689.to_u32, 21.119215322336654.to_u32, 22.484873559646417.to_u32, 23.850531796956176.to_u32, 25.216190034265935.to_u32, 26.581848271575698.to_u32, 27.94750650888546.to_u32, 29.31316474619522.to_u32, 30.67882298350498.to_u32, 32.044481220814745.to_u32, 33.410139458124505.to_u32, 34.775797695434264.to_u32, 36.14145593274402.to_u32, 37.50711417005378.to_u32, 38.87277240736355.to_u32, 40.23843064467331.to_u32, 41.60408888198307.to_u32, 42.96974711929283.to_u32, 44.33540535660259.to_u32, 45.70106359391235.to_u32, 47.06672183122211.to_u32, 48.43238006853187.to_u32, 49.79803830584164.to_u32, 51.163696543151396.to_u32, 52.529354780461155.to_u32, 53.89501301777092.to_u32, 55.26067125508068.to_u32, 56.62632949239044.to_u32, 57.9919877297002.to_u32, 59.35764596700996.to_u32, 60.723304204319724.to_u32, 62.088962441629484.to_u32, 63.45462067893924.to_u32, 64.82027891624901.to_u32, 66.18593715355877.to_u32, 67.55159539086853.to_u32, 68.91725362817829.to_u32, 70.28291186548805.to_u32, 71.6485701027978.to_u32, 73.01422834010756.to_u32, 74.37988657741734.to_u32, 75.7455448147271.to_u32, 77.11120305203686.to_u32, 78.47686128934662.to_u32, 79.84251952665637.to_u32, 81.20817776396613.to_u32, 82.5738360012759.to_u32, 83.93949423858567.to_u32, 85.30515247589543.to_u32, 86.67081071320519.to_u32, 88.03646895051494.to_u32, 89.4021271878247.to_u32, 90.76778542513446.to_u32, 92.13344366244422.to_u32, 93.49910189975398.to_u32, 94.86476013706374.to_u32, 96.23041837437351.to_u32, 97.59607661168327.to_u32, 98.96173484899303.to_u32, 100.32739308630279.to_u32, 101.69305132361255.to_u32, 103.05870956092231.to_u32, 104.42436779823207.to_u32, 105.79002603554184.to_u32, 107.1556842728516.to_u32, 108.52134251016136.to_u32, 109.88700074747112.to_u32, 111.25265898478088.to_u32, 112.61831722209064.to_u32, 113.9839754594004.to_u32, 115.34963369671016.to_u32, 116.71529193401992.to_u32, 118.08095017132969.to_u32, 119.44660840863945.to_u32, 120.81226664594921.to_u32, 122.17792488325897.to_u32, 123.54358312056873.to_u32, 124.90924135787849.to_u32, 126.27489959518824.to_u32, 127.64055783249802.to_u32, 129.00621606980778.to_u32, 130.37187430711754.to_u32, 131.7375325444273.to_u32, 133.10319078173706.to_u32, 134.46884901904681.to_u32, 135.83450725635657.to_u32, 137.20016549366633.to_u32, 138.5658237309761.to_u32, 139.93148196828585.to_u32, 141.2971402055956.to_u32, 142.66279844290537.to_u32, 144.02845668021513.to_u32, 145.39411491752492.to_u32, 146.75977315483468.to_u32, 148.12543139214443.to_u32, 149.4910896294542.to_u32, 150.85674786676395.to_u32, 152.2224061040737.to_u32, 153.58806434138347.to_u32, 154.95372257869323.to_u32, 156.319380816003.to_u32, 157.68503905331275.to_u32, 159.0506972906225.to_u32, 160.41635552793227.to_u32, 161.78201376524203.to_u32, 163.1476720025518.to_u32, 164.51333023986155.to_u32, 165.87898847717133.to_u32, 167.2446467144811.to_u32, 168.61030495179085.to_u32, 169.9759631891006.to_u32, 171.34162142641037.to_u32, 172.70727966372013.to_u32, 174.0729379010299.to_u32, 175.43859613833965.to_u32, 176.8042543756494.to_u32, 178.16991261295917.to_u32, 179.53557085026893.to_u32, 180.90122908757868.to_u32, 182.26688732488844.to_u32, 183.6325455621982.to_u32, 184.99820379950796.to_u32, 186.36386203681772.to_u32, 187.72952027412748.to_u32, 189.09517851143727.to_u32, 190.46083674874703.to_u32, 191.8264949860568.to_u32, 193.19215322336655.to_u32, 194.5578114606763.to_u32, 195.92346969798606.to_u32, 197.28912793529582.to_u32, 198.65478617260558.to_u32, 200.02044440991534.to_u32, 201.3861026472251.to_u32, 202.75176088453486.to_u32, 204.11741912184462.to_u32, 205.48307735915438.to_u32, 206.84873559646414.to_u32, 208.2143938337739.to_u32, 209.58005207108368.to_u32, 210.94571030839344.to_u32, 212.3113685457032.to_u32, 213.67702678301296.to_u32, 215.04268502032272.to_u32, 216.40834325763248.to_u32, 217.77400149494224.to_u32, 219.139659732252.to_u32, 220.50531796956176.to_u32, 221.87097620687152.to_u32, 223.23663444418128.to_u32, 224.60229268149104.to_u32, 225.9679509188008.to_u32, 227.33360915611055.to_u32, 228.6992673934203.to_u32, 230.06492563073007.to_u32, 231.43058386803983.to_u32, 232.79624210534962.to_u32, 234.16190034265938.to_u32, 235.52755857996914.to_u32, 236.8932168172789.to_u32, 238.25887505458866.to_u32, 239.62453329189842.to_u32, 240.99019152920818.to_u32, 242.35584976651793.to_u32, 243.7215080038277.to_u32, 245.08716624113745.to_u32, 246.4528244784472.to_u32, 247.81848271575697.to_u32, 249.18414095306673.to_u32, 250.5497991903765.to_u32, 251.91545742768625.to_u32, 253.28111566499604.to_u32, 254.6467739023058.to_u32, 256.01243213961556.to_u32, 257.37809037692534.to_u32, 258.7437486142351.to_u32, 260.1094068515448.to_u32, 261.4750650888546.to_u32, 262.8407233261643.to_u32, 264.2063815634741.to_u32, 265.5720398007839.to_u32, 266.93769803809363.to_u32, 268.3033562754034.to_u32, 269.66901451271315.to_u32, 271.03467275002293.to_u32, 272.40033098733267.to_u32, 273.76598922464245.to_u32, 275.1316474619522.to_u32, 276.497305699262.to_u32, 277.8629639365717.to_u32, 279.2286221738815.to_u32, 280.5942804111912.to_u32, 281.959938648501.to_u32, 283.32559688581074.to_u32, 284.6912551231205.to_u32, 286.05691336043026.to_u32, 287.42257159774005.to_u32, 288.78822983504983.to_u32, 290.15388807235956.to_u32, 291.51954630966935.to_u32, 292.8852045469791.to_u32, 294.25086278428887.to_u32, 295.6165210215986.to_u32, 296.9821792589084.to_u32, 298.3478374962181.to_u32, 299.7134957335279.to_u32, 301.07915397083764.to_u32, 302.4448122081474.to_u32, 303.81047044545716.to_u32, 305.17612868276694.to_u32, 306.5417869200767.to_u32, 307.90744515738646.to_u32, 309.27310339469625.to_u32, 310.638761632006.to_u32, 312.00441986931577.to_u32, 313.3700781066255.to_u32, 314.7357363439353.to_u32, 316.101394581245.to_u32, 317.4670528185548.to_u32, 318.83271105586454.to_u32, 320.1983692931743.to_u32, 321.56402753048405.to_u32, 322.92968576779384.to_u32, 324.2953440051036.to_u32, 325.66100224241336.to_u32, 327.0266604797231.to_u32, 328.3923187170329.to_u32, 329.75797695434267.to_u32, 331.1236351916524.to_u32, 332.4892934289622.to_u32, 333.8549516662719.to_u32, 335.2206099035817.to_u32, 336.58626814089143.to_u32, 337.9519263782012.to_u32, 339.31758461551095.to_u32, 340.68324285282074.to_u32, 342.04890109013047.to_u32, 343.41455932744026.to_u32, 344.78021756475.to_u32, 346.1458758020598.to_u32, 347.5115340393695.to_u32, 348.8771922766793.to_u32, 350.242850513989.to_u32, 351.6085087512988.to_u32, 352.9741669886086.to_u32, 354.33982522591833.to_u32, 355.7054834632281.to_u32, 357.07114170053785.to_u32, 358.43679993784764.to_u32, 359.80245817515737.to_u32, 361.16811641246716.to_u32, 362.5337746497769.to_u32, 363.8994328870867.to_u32, 365.2650911243964.to_u32, 366.6307493617062.to_u32, 367.9964075990159.to_u32, 369.3620658363257.to_u32, 370.72772407363544.to_u32, 372.09338231094523.to_u32, 373.45904054825496.to_u32, 374.82469878556475.to_u32, 376.19035702287454.to_u32, 377.55601526018427.to_u32, 378.92167349749406.to_u32, 380.2873317348038.to_u32, 381.6529899721136.to_u32, 383.0186482094233.to_u32, 384.3843064467331.to_u32, 385.7499646840428.to_u32, 387.1156229213526.to_u32, 388.48128115866234.to_u32, 389.84693939597213.to_u32, 391.21259763328186.to_u32, 392.57825587059165.to_u32, 393.9439141079014.to_u32, 395.30957234521117.to_u32, 396.67523058252095.to_u32, 398.0408888198307.to_u32, 399.4065470571405.to_u32, 400.7722052944502.to_u32, 402.13786353176.to_u32, 403.5035217690697.to_u32, 404.8691800063795.to_u32, 406.23483824368924.to_u32, 407.600496480999.to_u32, 408.96615471830876.to_u32, 410.33181295561855.to_u32, 411.6974711929283.to_u32, 413.06312943023806.to_u32, 414.4287876675478.to_u32, 415.7944459048576.to_u32, 417.16010414216737.to_u32, 418.5257623794771.to_u32, 419.8914206167869.to_u32, 421.2570788540966.to_u32, 422.6227370914064.to_u32, 423.98839532871614.to_u32, 425.3540535660259.to_u32, 426.71971180333566.to_u32, 428.08537004064544.to_u32, 429.4510282779552.to_u32, 430.81668651526496.to_u32, 432.1823447525747.to_u32, 433.5480029898845.to_u32, 434.9136612271942.to_u32, 436.279319464504.to_u32, 437.64497770181373.to_u32, 439.0106359391235.to_u32, 440.3762941764333.to_u32, 441.74195241374304.to_u32, 443.1076106510528.to_u32, 444.47326888836255.to_u32, 445.83892712567234.to_u32, 447.2045853629821.to_u32, 448.57024360029186.to_u32, 449.9359018376016.to_u32, 451.3015600749114.to_u32, 452.6672183122211.to_u32, 454.0328765495309.to_u32, 455.3985347868406.to_u32, 456.7641930241504.to_u32, 458.12985126146015.to_u32, 459.49550949876993.to_u32, 460.86116773607966.to_u32, 462.22682597338945.to_u32, 463.59248421069924.to_u32, 464.95814244800897.to_u32, 466.32380068531876.to_u32, 467.6894589226285.to_u32, 469.0551171599383.to_u32, 470.420775397248.to_u32, 471.7864336345578.to_u32, 473.1520918718675.to_u32, 474.5177501091773.to_u32, 475.88340834648704.to_u32, 477.24906658379683.to_u32, 478.61472482110656.to_u32, 479.98038305841635.to_u32, 481.3460412957261.to_u32, 482.71169953303587.to_u32, 484.07735777034566.to_u32, 485.4430160076554.to_u32, 486.8086742449652.to_u32, 488.1743324822749.to_u32, 489.5399907195847.to_u32, 490.9056489568944.to_u32, 492.2713071942042.to_u32, 493.63696543151394.to_u32, 495.00262366882373.to_u32, 496.36828190613346.to_u32, 497.73394014344325.to_u32, 499.099598380753.to_u32, 500.46525661806277.to_u32, 501.8309148553725.to_u32, 503.1965730926823.to_u32, 504.5622313299921.to_u32, 505.9278895673018.to_u32, 507.2935478046116.to_u32, 508.6592060419213.to_u32, 510.0248642792311.to_u32, 511.39052251654084.to_u32, 512.7561807538507.to_u32, 514.1218389911604.to_u32, 515.4874972284701.to_u32, 516.8531554657799.to_u32, 518.2188137030896.to_u32, 519.5844719403995.to_u32, 520.9501301777092.to_u32, 522.3157884150189.to_u32, 523.6814466523286.to_u32, 525.0471048896385.to_u32, 526.4127631269482.to_u32, 527.778421364258.to_u32, 529.1440796015678.to_u32, 530.5097378388775.to_u32, 531.8753960761873.to_u32, 533.241054313497.to_u32, 534.6067125508068.to_u32, 535.9723707881166.to_u32, 537.3380290254263.to_u32, 538.703687262736.to_u32, 540.0693455000459.to_u32, 541.4350037373556.to_u32, 542.8006619746653.to_u32, 544.1663202119751.to_u32, 545.5319784492849.to_u32, 546.8976366865946.to_u32, 548.2632949239044.to_u32, 549.6289531612142.to_u32, 550.994611398524.to_u32, 552.3602696358337.to_u32, 553.7259278731434.to_u32, 555.0915861104532.to_u32, 556.457244347763.to_u32, 557.8229025850727.to_u32, 559.1885608223824.to_u32, 560.5542190596923.to_u32, 561.919877297002.to_u32, 563.2855355343117.to_u32, 564.6511937716215.to_u32, 566.0168520089313.to_u32, 567.382510246241.to_u32, 568.7481684835508.to_u32, 570.1138267208605.to_u32, 571.4794849581704.to_u32, 572.8451431954801.to_u32, 574.2108014327898.to_u32, 575.5764596700997.to_u32, 576.9421179074094.to_u32, 578.3077761447191.to_u32, 579.6734343820289.to_u32, 581.0390926193387.to_u32, 582.4047508566484.to_u32, 583.7704090939582.to_u32, 585.1360673312679.to_u32, 586.5017255685777.to_u32, 587.8673838058875.to_u32, 589.2330420431972.to_u32, 590.5987002805069.to_u32, 591.9643585178168.to_u32, 593.3300167551265.to_u32, 594.6956749924362.to_u32, 596.0613332297461.to_u32, 597.4269914670558.to_u32, 598.7926497043655.to_u32, 600.1583079416753.to_u32, 601.5239661789851.to_u32, 602.8896244162949.to_u32, 604.2552826536046.to_u32, 605.6209408909143.to_u32, 606.9865991282242.to_u32, 608.3522573655339.to_u32, 609.7179156028436.to_u32, 611.0835738401533.to_u32, 612.4492320774632.to_u32, 613.8148903147729.to_u32, 615.1805485520827.to_u32, 616.5462067893925.to_u32, 617.9118650267022.to_u32, 619.277523264012.to_u32, 620.6431815013217.to_u32, 622.0088397386315.to_u32, 623.3744979759413.to_u32, 624.740156213251.to_u32, 626.1058144505607.to_u32, 627.4714726878706.to_u32, 628.8371309251803.to_u32, 630.20278916249.to_u32, 631.5684473997998.to_u32, 632.9341056371096.to_u32, 634.2997638744193.to_u32, 635.6654221117291.to_u32, 637.0310803490389.to_u32, 638.3967385863486.to_u32, 639.7623968236584.to_u32, 641.1280550609681.to_u32, 642.493713298278.to_u32, 643.8593715355877.to_u32, 645.2250297728974.to_u32, 646.5906880102071.to_u32, 647.956346247517.to_u32, 649.3220044848267.to_u32, 650.6876627221365.to_u32, 652.0533209594462.to_u32, 653.418979196756.to_u32, 654.7846374340658.to_u32, 656.1502956713755.to_u32, 657.5159539086853.to_u32, 658.8816121459951.to_u32, 660.2472703833048.to_u32, 661.6129286206145.to_u32, 662.9785868579244.to_u32, 664.3442450952341.to_u32, 665.7099033325438.to_u32, 667.0755615698536.to_u32, 668.4412198071634.to_u32, 669.8068780444731.to_u32, 671.1725362817829.to_u32, 672.5381945190926.to_u32, 673.9038527564024.to_u32, 675.2695109937122.to_u32, 676.6351692310219.to_u32, 678.0008274683316.to_u32, 679.3664857056415.to_u32, 680.7321439429512.to_u32, 682.0978021802609.to_u32, 683.4634604175708.to_u32, 684.8291186548805.to_u32, 686.1947768921902.to_u32, 687.5604351295.to_u32, 688.9260933668098.to_u32, 690.2917516041196.to_u32, 691.6574098414293.to_u32, 693.023068078739.to_u32, 694.3887263160489.to_u32, 695.7543845533586.to_u32, 697.1200427906683.to_u32, 698.485701027978.to_u32, 699.8513592652879.to_u32, 701.2170175025976.to_u32, 702.5826757399074.to_u32, 703.9483339772172.to_u32, 705.3139922145269.to_u32, 706.6796504518367.to_u32, 708.0453086891464.to_u32, 709.4109669264562.to_u32, 710.776625163766.to_u32, 712.1422834010757.to_u32, 713.5079416383854.to_u32, 714.8735998756953.to_u32, 716.239258113005.to_u32, 717.6049163503147.to_u32, 718.9705745876245.to_u32, 720.3362328249343.to_u32, 721.701891062244.to_u32, 723.0675492995538.to_u32, 724.4332075368636.to_u32, 725.7988657741734.to_u32, 727.1645240114831.to_u32, 728.5301822487928.to_u32, 729.8958404861027.to_u32, 731.2614987234124.to_u32, 732.6271569607221.to_u32, 733.9928151980318.to_u32, 735.3584734353417.to_u32, 736.7241316726514.to_u32, 738.0897899099612.to_u32, 739.4554481472709.to_u32, 740.8211063845807.to_u32, 742.1867646218905.to_u32, 743.5524228592002.to_u32, 744.9180810965099.to_u32, 746.2837393338198.to_u32, 747.6493975711295.to_u32, 749.0150558084392.to_u32, 750.3807140457491.to_u32, 751.7463722830588.to_u32, 753.1120305203685.to_u32, 754.4776887576783.to_u32, 755.8433469949881.to_u32, 757.2090052322978.to_u32, 758.5746634696076.to_u32, 759.9403217069173.to_u32, 761.3059799442271.to_u32, 762.6716381815369.to_u32, 764.0372964188466.to_u32, 765.4029546561563.to_u32, 766.7686128934662.to_u32, 768.1342711307759.to_u32, 769.4999293680856.to_u32, 770.8655876053955.to_u32, 772.2312458427052.to_u32, 773.596904080015.to_u32, 774.9625623173247.to_u32, 776.3282205546345.to_u32, 777.6938787919443.to_u32, 779.059537029254.to_u32, 780.4251952665637.to_u32, 781.7908535038736.to_u32, 783.1565117411833.to_u32, 784.522169978493.to_u32, 785.8878282158028.to_u32, 787.2534864531126.to_u32, 788.6191446904223.to_u32, 789.9848029277321.to_u32, 791.3504611650419.to_u32, 792.7161194023516.to_u32, 794.0817776396614.to_u32, 795.4474358769711.to_u32, 796.813094114281.to_u32, 798.1787523515907.to_u32, 799.5444105889004.to_u32, 800.9100688262101.to_u32, 802.27572706352.to_u32, 803.6413853008297.to_u32, 805.0070435381394.to_u32, 806.3727017754492.to_u32, 807.738360012759.to_u32, 809.1040182500687.to_u32, 810.4696764873785.to_u32, 811.8353347246883.to_u32, 813.200992961998.to_u32, 814.5666511993078.to_u32, 815.9323094366175.to_u32, 817.2979676739274.to_u32, 818.6636259112371.to_u32, 820.0292841485468.to_u32, 821.3949423858566.to_u32, 822.7606006231664.to_u32, 824.1262588604761.to_u32, 825.4919170977859.to_u32, 826.8575753350956.to_u32, 828.2232335724054.to_u32, 829.5888918097152.to_u32, 830.9545500470249.to_u32, 832.3202082843347.to_u32, 833.6858665216445.to_u32, 835.0515247589542.to_u32, 836.4171829962639.to_u32, 837.7828412335738.to_u32, 839.1484994708835.to_u32, 840.5141577081932.to_u32, 841.879815945503.to_u32, 843.2454741828128.to_u32, 844.6111324201225.to_u32, 845.9767906574323.to_u32, 847.342448894742.to_u32, 848.7081071320519.to_u32, 850.0737653693616.to_u32, 851.4394236066713.to_u32, 852.805081843981.to_u32, 854.1707400812909.to_u32, 855.5363983186006.to_u32, 856.9020565559103.to_u32, 858.2677147932202.to_u32, 859.6333730305299.to_u32, 860.9990312678397.to_u32, 862.3646895051494.to_u32, 863.7303477424592.to_u32, 865.096005979769.to_u32, 866.4616642170787.to_u32, 867.8273224543884.to_u32, 869.1929806916983.to_u32, 870.558638929008.to_u32, 871.9242971663177.to_u32, 873.2899554036275.to_u32, 874.6556136409373.to_u32, 876.021271878247.to_u32, 877.3869301155568.to_u32, 878.7525883528666.to_u32, 880.1182465901763.to_u32, 881.4839048274861.to_u32, 882.8495630647958.to_u32, 884.2152213021056.to_u32, 885.5808795394154.to_u32, 886.9465377767251.to_u32, 888.3121960140348.to_u32, 889.6778542513447.to_u32, 891.0435124886544.to_u32, 892.4091707259641.to_u32, 893.7748289632739.to_u32, 895.1404872005837.to_u32, 896.5061454378935.to_u32, 897.8718036752032.to_u32, 899.237461912513.to_u32, 900.6031201498228.to_u32, 901.9687783871325.to_u32, 903.3344366244422.to_u32, 904.7000948617521.to_u32, 906.0657530990618.to_u32, 907.4314113363715.to_u32, 908.7970695736813.to_u32, 910.1627278109911.to_u32, 911.5283860483008.to_u32, 912.8940442856106.to_u32, 914.2597025229203.to_u32, 915.6253607602301.to_u32, 916.9910189975399.to_u32, 918.3566772348496.to_u32, 919.7223354721593.to_u32, 921.0879937094692.to_u32, 922.4536519467789.to_u32, 923.8193101840886.to_u32, 925.1849684213985.to_u32, 926.5506266587082.to_u32, 927.9162848960179.to_u32, 929.2819431333277.to_u32, 930.6476013706375.to_u32, 932.0132596079472.to_u32, 933.378917845257.to_u32, 934.7445760825667.to_u32, 936.1102343198766.to_u32, 937.4758925571863.to_u32, 938.841550794496.to_u32, 940.2072090318057.to_u32, 941.5728672691156.to_u32, 942.9385255064253.to_u32, 944.304183743735.to_u32, 945.6698419810449.to_u32, 947.0355002183546.to_u32, 948.4011584556644.to_u32, 949.7668166929741.to_u32, 951.1324749302839.to_u32, 952.4981331675937.to_u32, 953.8637914049034.to_u32, 955.2294496422131.to_u32, 956.595107879523.to_u32, 957.9607661168327.to_u32, 959.3264243541424.to_u32, 960.6920825914522.to_u32, 962.057740828762.to_u32, 963.4233990660717.to_u32, 964.7890573033815.to_u32, 966.1547155406913.to_u32, 967.520373778001.to_u32, 968.8860320153108.to_u32, 970.2516902526205.to_u32, 971.6173484899304.to_u32, 972.9830067272401.to_u32, 974.3486649645498.to_u32, 975.7143232018595.to_u32, 977.0799814391694.to_u32, 978.4456396764791.to_u32, 979.8112979137888.to_u32, 981.1769561510986.to_u32, 982.5426143884084.to_u32, 983.9082726257182.to_u32, 985.2739308630279.to_u32, 986.6395891003377.to_u32, 988.0052473376475.to_u32, 989.3709055749572.to_u32, 990.7365638122669.to_u32, 992.1022220495768.to_u32, 993.4678802868865.to_u32, 994.8335385241962.to_u32, 996.199196761506.to_u32, 997.5648549988158.to_u32, 998.9305132361255.to_u32, 1000.2961714734353.to_u32, 1001.661829710745.to_u32, 1003.0274879480548.to_u32, 1004.3931461853646.to_u32, 1005.7588044226743.to_u32, 1007.1244626599841.to_u32, 1008.4901208972939.to_u32, 1009.8557791346036.to_u32, 1011.2214373719133.to_u32, 1012.5870956092232.to_u32, 1013.9527538465329.to_u32, 1015.3184120838426.to_u32, 1016.6840703211524.to_u32, 1018.0497285584622.to_u32, 1019.415386795772.to_u32, 1020.7810450330817.to_u32, 1022.1467032703914.to_u32, 1023.5123615077013.to_u32, 1024.878019745011.to_u32, 1026.2436779823208.to_u32, 1027.6093362196304.to_u32, 1028.9749944569403.to_u32, 1030.3406526942501.to_u32, 1031.7063109315598.to_u32, 1033.0719691688696.to_u32, 1034.4376274061792.to_u32, 1035.803285643489.to_u32, 1037.168943880799.to_u32, 1038.5346021181085.to_u32, 1039.9002603554184.to_u32, 1041.2659185927282.to_u32, 1042.6315768300378.to_u32, 1043.9972350673477.to_u32, 1045.3628933046573.to_u32, 1046.7285515419671.to_u32, 1048.094209779277.to_u32, 1049.4598680165866.to_u32, 1050.8255262538964.to_u32, 1052.1911844912063.to_u32, 1053.556842728516.to_u32, 1054.9225009658257.to_u32, 1056.2881592031356.to_u32, 1057.6538174404452.to_u32, 1059.019475677755.to_u32, 1060.3851339150647.to_u32, 1061.7507921523745.to_u32, 1063.1164503896844.to_u32, 1064.482108626994.to_u32, 1065.8477668643038.to_u32, 1067.2134251016137.to_u32, 1068.5790833389233.to_u32, 1069.9447415762331.to_u32, 1071.3103998135427.to_u32, 1072.6760580508526.to_u32, 1074.0417162881624.to_u32, 1075.407374525472.to_u32, 1076.773032762782.to_u32, 1078.1386910000917.to_u32, 1079.5043492374014.to_u32, 1080.8700074747112.to_u32, 1082.235665712021.to_u32, 1083.6013239493307.to_u32, 1084.9669821866405.to_u32, 1086.3326404239501.to_u32, 1087.69829866126.to_u32, 1089.0639568985698.to_u32, 1090.4296151358794.to_u32, 1091.7952733731893.to_u32, 1093.1609316104991.to_u32, 1094.5265898478087.to_u32, 1095.8922480851186.to_u32, 1097.2579063224284.to_u32, 1098.623564559738.to_u32, 1099.989222797048.to_u32, 1101.3548810343575.to_u32, 1102.7205392716673.to_u32, 1104.0861975089772.to_u32, 1105.4518557462868.to_u32, 1106.8175139835967.to_u32, 1108.1831722209065.to_u32, 1109.5488304582161.to_u32, 1110.914488695526.to_u32, 1112.2801469328356.to_u32, 1113.6458051701454.to_u32, 1115.0114634074553.to_u32, 1116.3771216447649.to_u32, 1117.7427798820747.to_u32, 1119.1084381193846.to_u32, 1120.4740963566942.to_u32, 1121.839754594004.to_u32, 1123.2054128313139.to_u32, 1124.5710710686235.to_u32, 1125.9367293059333.to_u32, 1127.302387543243.to_u32, 1128.6680457805528.to_u32, 1130.0337040178626.to_u32, 1131.3993622551723.to_u32, 1132.765020492482.to_u32, 1134.130678729792.to_u32, 1135.4963369671016.to_u32, 1136.8619952044114.to_u32, 1138.227653441721.to_u32, 1139.5933116790309.to_u32, 1140.9589699163407.to_u32, 1142.3246281536503.to_u32, 1143.6902863909602.to_u32, 1145.05594462827.to_u32, 1146.4216028655796.to_u32, 1147.7872611028895.to_u32, 1149.1529193401993.to_u32, 1150.518577577509.to_u32, 1151.8842358148188.to_u32, 1153.2498940521284.to_u32, 1154.6155522894383.to_u32, 1155.981210526748.to_u32, 1157.3468687640577.to_u32, 1158.7125270013676.to_u32, 1160.0781852386774.to_u32, 1161.443843475987.to_u32, 1162.8095017132969.to_u32, 1164.1751599506067.to_u32, 1165.5408181879163.to_u32, 1166.9064764252262.to_u32, 1168.2721346625358.to_u32, 1169.6377928998456.to_u32, 1171.0034511371555.to_u32, 1172.369109374465.to_u32, 1173.734767611775.to_u32, 1175.1004258490848.to_u32, 1176.4660840863944.to_u32, 1177.8317423237042.to_u32, 1179.1974005610139.to_u32, 1180.5630587983237.to_u32, 1181.9287170356336.to_u32, 1183.2943752729432.to_u32, 1184.660033510253.to_u32, 1186.0256917475629.to_u32, 1187.3913499848725.to_u32, 1188.7570082221823.to_u32, 1190.1226664594922.to_u32, 1191.4883246968018.to_u32, 1192.8539829341116.to_u32, 1194.2196411714212.to_u32, 1195.585299408731.to_u32, 1196.950957646041.to_u32, 1198.3166158833506.to_u32, 1199.6822741206604.to_u32, 1201.0479323579702.to_u32, 1202.4135905952799.to_u32, 1203.7792488325897.to_u32, 1205.1449070698995.to_u32, 1206.5105653072092.to_u32, 1207.876223544519.to_u32, 1209.2418817818286.to_u32, 1210.6075400191385.to_u32, 1211.9731982564483.to_u32, 1213.338856493758.to_u32, 1214.7045147310678.to_u32, 1216.0701729683776.to_u32, 1217.4358312056872.to_u32, 1218.801489442997.to_u32, 1220.1671476803067.to_u32, 1221.5328059176165.to_u32, 1222.8984641549264.to_u32, 1224.264122392236.to_u32, 1225.6297806295458.to_u32, 1226.9954388668557.to_u32, 1228.3610971041653.to_u32, 1229.7267553414752.to_u32, 1231.092413578785.to_u32, 1232.4580718160946.to_u32, 1233.8237300534045.to_u32, 1235.189388290714.to_u32, 1236.555046528024.to_u32, 1237.9207047653338.to_u32, 1239.2863630026434.to_u32, 1240.6520212399532.to_u32, 1242.017679477263.to_u32, 1243.3833377145727.to_u32, 1244.7489959518825.to_u32, 1246.1146541891922.to_u32, 1247.480312426502.to_u32, 1248.8459706638118.to_u32, 1250.2116289011215.to_u32, 1251.5772871384313.to_u32, 1252.9429453757411.to_u32, 1254.3086036130508.to_u32, 1255.6742618503606.to_u32, 1257.0399200876705.to_u32, 1258.40557832498.to_u32, 1259.77123656229.to_u32, 1261.1368947995995.to_u32, 1262.5025530369094.to_u32, 1263.8682112742192.to_u32, 1265.2338695115288.to_u32, 1266.5995277488387.to_u32, 1267.9651859861485.to_u32, 1269.3308442234581.to_u32, 1270.696502460768.to_u32, 1272.0621606980778.to_u32, 1273.4278189353874.to_u32, 1274.7934771726973.to_u32, 1276.159135410007.to_u32, 1277.5247936473168.to_u32, 1278.8904518846266.to_u32, 1280.2561101219362.to_u32, 1281.621768359246.to_u32, 1282.987426596556.to_u32, 1284.3530848338655.to_u32, 1285.7187430711754.to_u32, 1287.084401308485.to_u32, 1288.4500595457948.to_u32, 1289.8157177831047.to_u32, 1291.1813760204143.to_u32, 1292.5470342577241.to_u32, 1293.912692495034.to_u32, 1295.2783507323436.to_u32, 1296.6440089696534.to_u32, 1298.0096672069633.to_u32, 1299.375325444273.to_u32, 1300.7409836815827.to_u32, 1302.1066419188924.to_u32, 1303.4723001562022.to_u32, 1304.837958393512.to_u32, 1306.2036166308217.to_u32, 1307.5692748681315.to_u32, 1308.9349331054414.to_u32, 1310.300591342751.to_u32, 1311.6662495800608.to_u32, 1313.0319078173707.to_u32, 1314.3975660546803.to_u32, 1315.7632242919901.to_u32, 1317.1288825292997.to_u32, 1318.4945407666096.to_u32, 1319.8601990039194.to_u32, 1321.225857241229.to_u32, 1322.591515478539.to_u32, 1323.9571737158487.to_u32, 1325.3228319531584.to_u32, 1326.6884901904682.to_u32, 1328.0541484277778.to_u32, 1329.4198066650877.to_u32, 1330.7854649023975.to_u32, 1332.1511231397071.to_u32, 1333.516781377017.to_u32, 1334.8824396143268.to_u32, 1336.2480978516364.to_u32, 1337.6137560889463.to_u32, 1338.9794143262561.to_u32, 1340.3450725635657.to_u32, 1341.7107308008756.to_u32, 1343.0763890381852.to_u32, 1344.442047275495.to_u32, 1345.807705512805.to_u32, 1347.1733637501145.to_u32, 1348.5390219874243.to_u32, 1349.9046802247342.to_u32, 1351.2703384620438.to_u32, 1352.6359966993537.to_u32, 1354.0016549366633.to_u32, 1355.3673131739731.to_u32, 1356.732971411283.to_u32, 1358.0986296485926.to_u32, 1359.4642878859024.to_u32, 1360.8299461232123.to_u32, 1362.1956043605219.to_u32, 1363.5612625978317.to_u32, 1364.9269208351416.to_u32, 1366.2925790724512.to_u32, 1367.658237309761.to_u32, 1369.0238955470707.to_u32, 1370.3895537843805.to_u32, 1371.7552120216903.to_u32, 1373.120870259.to_u32, 1374.4865284963098.to_u32, 1375.8521867336196.to_u32, 1377.2178449709293.to_u32, 1378.583503208239.to_u32, 1379.949161445549.to_u32, 1381.3148196828586.to_u32, 1382.6804779201684.to_u32, 1384.046136157478.to_u32, 1385.4117943947879.to_u32, 1386.7774526320977.to_u32, 1388.1431108694073.to_u32, 1389.5087691067172.to_u32, 1390.874427344027.to_u32, 1392.2400855813366.to_u32, 1393.6057438186465.to_u32, 1394.971402055956.to_u32, 1396.337060293266.to_u32, 1397.7027185305758.to_u32, 1399.0683767678854.to_u32, 1400.4340350051953.to_u32)\nend"},{"id":"VERSION","name":"VERSION","value":"\"0.1.0\""}],"doc":"TODO: Write documentation for `Base58`","summary":"<p><span class=\"flag orange\">TODO</span>  Write documentation for <code><a href=\"Base58.html\">Base58</a></code></p>","class_methods":[{"html_id":"decode(value:String,into=String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"decode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","default_value":"String","external_name":"into","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : String, into = String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : <a href=\"String.html\">String</a>, into = <span class=\"t\">String</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":9,"url":null},"def":{"name":"decode","args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","default_value":"String","external_name":"into","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"decode(value.to_slice.to_unsafe, value.bytesize, into, alphabet)"}},{"html_id":"decode(value:String,check:Check,into=String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"decode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"check","external_name":"check","restriction":"Check"},{"name":"into","default_value":"String","external_name":"into","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : String, check : Check, into = String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : <a href=\"String.html\">String</a>, check : <a href=\"Base58/Check.html\">Check</a>, into = <span class=\"t\">String</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":14,"url":null},"def":{"name":"decode","args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"check","external_name":"check","restriction":"Check"},{"name":"into","default_value":"String","external_name":"into","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"decode(value.to_slice.to_unsafe, value.bytesize, check, into, alphabet)"}},{"html_id":"decode(value:Slice(UInt8)|StaticArray(UInt8,N),into=String,alphabet:Alphabet.class=Alphabet::Bitcoin)forallN-class-method","name":"decode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, N)"},{"name":"into","default_value":"String","external_name":"into","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Slice(UInt8) | StaticArray(UInt8, N), into = String, alphabet : Alphabet.class = Alphabet::Bitcoin) forall N","args_html":"(value : Slice(UInt8) | <a href=\"StaticArray.html\">StaticArray</a>(UInt8, N), into = <span class=\"t\">String</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>) forall N","location":{"filename":"src/base58/decoder.cr","line_number":19,"url":null},"def":{"name":"decode","args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, N)"},{"name":"into","default_value":"String","external_name":"into","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"decode(value.to_unsafe, value.size, into, alphabet)"}},{"html_id":"decode(value:Slice(UInt8)|StaticArray(UInt8,N),into:String,mutate:Bool,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"decode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, N)"},{"name":"into","external_name":"into","restriction":"String"},{"name":"mutate","external_name":"mutate","restriction":"Bool"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Slice(UInt8) | StaticArray(UInt8, N), into : String, mutate : Bool, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Slice(UInt8) | <a href=\"StaticArray.html\">StaticArray</a>(UInt8, N), into : <a href=\"String.html\">String</a>, mutate : Bool, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":24,"url":null},"def":{"name":"decode","args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, N)"},{"name":"into","external_name":"into","restriction":"String"},{"name":"mutate","external_name":"mutate","restriction":"Bool"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"if mutate\n  unsafe_decode(value.to_slice.to_unsafe, value.bytesize, into, alphabet)\nelse\n  decode(value, into, alphabet)\nend"}},{"html_id":"decode(value:Array(UInt8),into=String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"decode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Array(UInt8)"},{"name":"into","default_value":"String","external_name":"into","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Array(UInt8), into = String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Array(UInt8), into = <span class=\"t\">String</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":33,"url":null},"def":{"name":"decode","args":[{"name":"value","external_name":"value","restriction":"Array(UInt8)"},{"name":"into","default_value":"String","external_name":"into","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"pointer = (GC.malloc_atomic(value.size)).as(::Pointer(UInt8))\nvalue.each_with_index do |value, i|\n  pointer[i] = value\nend\ndecode(pointer, value.size, into, alphabet)\n"}},{"html_id":"decode(value:Array(Char),into=String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"decode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Array(Char)"},{"name":"into","default_value":"String","external_name":"into","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Array(Char), into = String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Array(<a href=\"Char.html\">Char</a>), into = <span class=\"t\">String</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":42,"url":null},"def":{"name":"decode","args":[{"name":"value","external_name":"value","restriction":"Array(Char)"},{"name":"into","default_value":"String","external_name":"into","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"pointer = (GC.malloc_atomic(value.size)).as(::Pointer(UInt8))\nvalue.each_with_index do |value, i|\n  pointer[i] = value.ord.to_u8\nend\ndecode(pointer, value.size, into, alphabet)\n"}},{"html_id":"decode(value:StringBuffer,into=String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"decode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"StringBuffer"},{"name":"into","default_value":"String","external_name":"into","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : StringBuffer, into = String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : <a href=\"StringBuffer.html\">StringBuffer</a>, into = <span class=\"t\">String</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":51,"url":null},"def":{"name":"decode","args":[{"name":"value","external_name":"value","restriction":"StringBuffer"},{"name":"into","default_value":"String","external_name":"into","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"decode(value.buffer, into, alphabet)"}},{"html_id":"decode(value:Pointer(UInt8),size:Int32,into:StaticArray(T,N).class,alphabet:Alphabet.class=Alphabet::Bitcoin)forallT,N-class-method","name":"decode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"StaticArray(T, N).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Pointer(UInt8), size : Int32, into : StaticArray(T, N).class, alphabet : Alphabet.class = Alphabet::Bitcoin) forall T, N","args_html":"(value : Pointer(UInt8), size : Int32, into : <span class=\"t\">StaticArray</span>(<span class=\"t\">T</span>, <span class=\"t\">N</span>).<span class=\"k\">class</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>) forall T, N","location":{"filename":"src/base58/decoder.cr","line_number":87,"url":null},"def":{"name":"decode","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"StaticArray(T, N).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"static_array = StaticArray(UInt8, N).new(0)\n_, final_size = decode_into_pointer(value, static_array.to_unsafe, size, alphabet)\n{static_array, final_size}\n"}},{"html_id":"decode(value:Pointer(UInt8),size:Int32,into:Int.class,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"decode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"Int.class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Pointer(UInt8), size : Int32, into : Int.class, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Pointer(UInt8), size : Int32, into : <span class=\"t\">Int</span>.<span class=\"k\">class</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":56,"url":null},"def":{"name":"decode","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"Int.class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"result = into.zero\nindex = 0\nwhile index < size\n  digit = alphabet.inverse(value[index])\n  result = (result * 58) + digit\n  index = index + 1\nend\nresult\n"}},{"html_id":"decode(value:Pointer(UInt8),size:Int32,into:String.class=String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"decode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","default_value":"String","external_name":"into","restriction":"String.class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Pointer(UInt8), size : Int32, into : String.class = String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Pointer(UInt8), size : Int32, into : <span class=\"t\">String</span>.<span class=\"k\">class</span> = <span class=\"t\">String</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":67,"url":null},"def":{"name":"decode","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","default_value":"String","external_name":"into","restriction":"String.class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"String.new(size) do |ptr|\n  _, final_size = decode_into_pointer(value, ptr, size, alphabet)\n  {final_size, final_size}\nend"}},{"html_id":"decode(value:Pointer(UInt8),size:Int32,check:Check,into:String.class=String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"decode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"check","external_name":"check","restriction":"Check"},{"name":"into","default_value":"String","external_name":"into","restriction":"String.class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Pointer(UInt8), size : Int32, check : Check, into : String.class = String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Pointer(UInt8), size : Int32, check : <a href=\"Base58/Check.html\">Check</a>, into : <span class=\"t\">String</span>.<span class=\"k\">class</span> = <span class=\"t\">String</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":74,"url":null},"def":{"name":"decode","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"check","external_name":"check","restriction":"Check"},{"name":"into","default_value":"String","external_name":"into","restriction":"String.class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"String.new(size) do |ptr|\n  _, final_size = decode_into_pointer(value, ptr, size, check, alphabet)\n  {final_size, final_size}\nend"}},{"html_id":"decode(value:Pointer(UInt8),size:Int32,into:Slice(UInt8).class,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"decode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"Slice(UInt8).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Pointer(UInt8), size : Int32, into : Slice(UInt8).class, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Pointer(UInt8), size : Int32, into : <span class=\"t\">Slice</span>(<span class=\"t\">UInt8</span>).<span class=\"k\">class</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":82,"url":null},"def":{"name":"decode","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"Slice(UInt8).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"Slice.new(*decode_into_pointer(value, (GC.malloc_atomic(size)).as(::Pointer(UInt8)), size, alphabet))"}},{"html_id":"decode(value:Pointer(UInt8),size:Int32,into:Pointer.class,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"decode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"Pointer.class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Pointer(UInt8), size : Int32, into : Pointer.class, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Pointer(UInt8), size : Int32, into : <span class=\"t\">Pointer</span>.<span class=\"k\">class</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":94,"url":null},"def":{"name":"decode","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"Pointer.class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"decode_into_pointer(value, (GC.malloc_atomic(size)).as(::Pointer(UInt8)), size, alphabet)"}},{"html_id":"decode(value:Pointer(UInt8),size:Int32,into:Array(UInt8).class,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"decode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"Array(UInt8).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Pointer(UInt8), size : Int32, into : Array(UInt8).class, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Pointer(UInt8), size : Int32, into : <span class=\"t\">Array</span>(<span class=\"t\">UInt8</span>).<span class=\"k\">class</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":99,"url":null},"def":{"name":"decode","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"Array(UInt8).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"decode_to_array(value, size, alphabet)"}},{"html_id":"decode(value:Pointer(UInt8),size:Int32,into:Array(Char).class,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"decode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"Array(Char).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Pointer(UInt8), size : Int32, into : Array(Char).class, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Pointer(UInt8), size : Int32, into : <span class=\"t\">Array</span>(<span class=\"t\">Char</span>).<span class=\"k\">class</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":104,"url":null},"def":{"name":"decode","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"Array(Char).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"(decode_to_array(value, size, alphabet)).map(&.chr)"}},{"html_id":"decode(value:Pointer(UInt8),size:Int32,into:StringBuffer.class,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"decode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"StringBuffer.class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Pointer(UInt8), size : Int32, into : StringBuffer.class, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Pointer(UInt8), size : Int32, into : <span class=\"t\">StringBuffer</span>.<span class=\"k\">class</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":109,"url":null},"def":{"name":"decode","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"StringBuffer.class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"buffer = StringBuffer.new(size)\ndecode_into_string(value, buffer.buffer, size, alphabet)\nbuffer\n"}},{"html_id":"decode(value:Pointer(UInt8),size:Int32,into:String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"decode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"String"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Pointer(UInt8), size : Int32, into : String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Pointer(UInt8), size : Int32, into : <a href=\"String.html\">String</a>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":115,"url":null},"def":{"name":"decode","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"String"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"original_size = into.bytesize\nbuffer_size = (original_size + size) + 1\nbigptr = (GC.malloc_atomic(buffer_size * 2)).as(::Pointer(UInt8))\nString.new(buffer_size) do |ptr|\n  ptr.copy_from(into.to_slice.to_unsafe, original_size)\n  _, final_size = decode_into_pointer(value, ptr + original_size, size, alphabet)\n  {original_size + final_size, original_size + final_size}\nend\n"}},{"html_id":"decode(value:Pointer(UInt8),size:Int32,into:StaticArray(UInt8,N)|Slice(UInt8),alphabet:Alphabet.class=Alphabet::Bitcoin)forallN-class-method","name":"decode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"StaticArray(UInt8, N) | Slice(UInt8)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Pointer(UInt8), size : Int32, into : StaticArray(UInt8, N) | Slice(UInt8), alphabet : Alphabet.class = Alphabet::Bitcoin) forall N","args_html":"(value : Pointer(UInt8), size : Int32, into : <a href=\"StaticArray.html\">StaticArray</a>(UInt8, N) | Slice(UInt8), alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>) forall N","location":{"filename":"src/base58/decoder.cr","line_number":134,"url":null},"def":{"name":"decode","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"StaticArray(UInt8, N) | Slice(UInt8)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"_, final_size = decode_into_pointer(value, into.to_unsafe, size, alphabet)\n{into, final_size}\n"}},{"html_id":"decode(value:Pointer(UInt8),size:Int32,into:Pointer(UInt8),alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"decode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"Pointer(UInt8)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Pointer(UInt8), size : Int32, into : Pointer(UInt8), alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Pointer(UInt8), size : Int32, into : Pointer(UInt8), alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":140,"url":null},"def":{"name":"decode","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"Pointer(UInt8)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"decode_into_pointer(value, into, size, alphabet)"}},{"html_id":"decode(value:Pointer(UInt8),size:Int32,into:Array(UInt8),alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"decode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"Array(UInt8)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Pointer(UInt8), size : Int32, into : Array(UInt8), alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Pointer(UInt8), size : Int32, into : Array(UInt8), alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":145,"url":null},"def":{"name":"decode","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"Array(UInt8)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"decode_into_array(value, into, size, alphabet)"}},{"html_id":"decode(value:Pointer(UInt8),size:Int32,into:Array(Char),alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"decode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"Array(Char)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Pointer(UInt8), size : Int32, into : Array(Char), alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Pointer(UInt8), size : Int32, into : Array(<a href=\"Char.html\">Char</a>), alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":150,"url":null},"def":{"name":"decode","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"Array(Char)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"decode_into_array(value, into, size, alphabet)"}},{"html_id":"decode(value:Pointer(UInt8),size:Int32,into:StringBuffer,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"decode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"StringBuffer"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Pointer(UInt8), size : Int32, into : StringBuffer, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Pointer(UInt8), size : Int32, into : <a href=\"StringBuffer.html\">StringBuffer</a>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":155,"url":null},"def":{"name":"decode","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"StringBuffer"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"decode_into_string(value, into.buffer, size, alphabet)"}},{"html_id":"decode_into_pointer(value:Pointer(UInt8),pointer:Pointer(UInt8),size:Int,alphabet:Alphabet::Monero.class)-class-method","name":"decode_into_pointer","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"pointer","external_name":"pointer","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int"},{"name":"alphabet","external_name":"alphabet","restriction":"Alphabet::Monero.class"}],"args_string":"(value : Pointer(UInt8), pointer : Pointer(UInt8), size : Int, alphabet : Alphabet::Monero.class)","args_html":"(value : Pointer(UInt8), pointer : Pointer(UInt8), size : Int, alphabet : <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Monero</span>.<span class=\"k\">class</span>)","location":{"filename":"src/base58/decoder.cr","line_number":309,"url":null},"def":{"name":"decode_into_pointer","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"pointer","external_name":"pointer","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int"},{"name":"alphabet","external_name":"alphabet","restriction":"Alphabet::Monero.class"}],"visibility":"Public","body":"pointer_index = 0\naggregate_index = 0\naggregate_pointer_index = 0\nntimes, remainder = size.divmod(11)\niterations = (remainder.zero? ? ntimes : ntimes + 1)\niterations.times do |nth_iteration|\n  index = aggregate_index\n  pointer_index = aggregate_pointer_index\n  target_size = index + 11\n  if target_size > size\n    target_size = size\n  end\n  while index < target_size\n    val = (alphabet.inverse(value[index])).to_u16\n    inner_idx = aggregate_pointer_index\n    while inner_idx < pointer_index\n      byte = pointer[inner_idx]\n      val = val + (byte.to_u16 * 58)\n      pointer[inner_idx] = (val & 255).to_u8\n      val = val >> 8\n      inner_idx = inner_idx + 1\n    end\n    while val > 0\n      pointer[pointer_index] = (val & 255).to_u8\n      pointer_index = pointer_index + 1\n      val = val >> 8\n    end\n    index = index + 1\n  end\n  zer0 = alphabet[0]\n  zeropad_index = aggregate_index\n  while zeropad_index < index\n    if value[index] != zer0\n      break\n    end\n    pointer[pointer_index] = 0\n    pointer_index = pointer_index + 1\n    zeropad_index = zeropad_index + 1\n  end\n  front_pos = aggregate_pointer_index\n  back_pos = pointer_index - 1\n  while front_pos <= back_pos\n    pointer[front_pos], pointer[back_pos] = pointer[back_pos], pointer[front_pos]\n    front_pos = front_pos + 1\n    back_pos = back_pos - 1\n  end\n  aggregate_index = index\n  aggregate_pointer_index = pointer_index\nend\n{pointer, aggregate_pointer_index}\n"}},{"html_id":"decode_into_pointer(value:Pointer(UInt8),pointer:Pointer(UInt8),size:Int,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"decode_into_pointer","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"pointer","external_name":"pointer","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Pointer(UInt8), pointer : Pointer(UInt8), size : Int, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Pointer(UInt8), pointer : Pointer(UInt8), size : Int, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":286,"url":null},"def":{"name":"decode_into_pointer","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"pointer","external_name":"pointer","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"index = 0\npointer_index = 0\nindex, pointer_index = primary_decoding(value, pointer, size, index, pointer_index, alphabet)\npointer_index = zero_padding(value, pointer, size, pointer_index, alphabet[0])\nreverse_decoding(pointer, pointer_index)\n{pointer, pointer_index}\n"}},{"html_id":"decode_into_pointer(value:Pointer(UInt8),pointer:Pointer(UInt8),size:Int,check:Check,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"decode_into_pointer","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"pointer","external_name":"pointer","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int"},{"name":"check","external_name":"check","restriction":"Check"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Pointer(UInt8), pointer : Pointer(UInt8), size : Int, check : Check, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Pointer(UInt8), pointer : Pointer(UInt8), size : Int, check : <a href=\"Base58/Check.html\">Check</a>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":297,"url":null},"def":{"name":"decode_into_pointer","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"pointer","external_name":"pointer","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int"},{"name":"check","external_name":"check","restriction":"Check"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"index = 0\npointer_index = 0\nindex, pointer_index = primary_decoding(value, pointer, size, index, pointer_index, alphabet)\npointer_index = zero_padding(value, pointer, size, pointer_index, alphabet[0])\nreverse_decoding(pointer, pointer_index)\nvalidate_checksum(pointer, pointer_index, check)\n{pointer, pointer_index - 4}\n"}},{"html_id":"decode_to_array(value:Pointer(UInt8),size:Int,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"decode_to_array","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Pointer(UInt8), size : Int, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Pointer(UInt8), size : Int, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":161,"url":null},"def":{"name":"decode_to_array","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"ptr, final_size = decode_into_pointer(value, (GC.malloc_atomic(size)).as(::Pointer(UInt8)), size, alphabet)\nArray(UInt8).new(final_size) do |i|\n  ptr[i]\nend\n"}},{"html_id":"encode(value:Int,into:StaticArray(T,N).class,alphabet:Alphabet.class=Alphabet::Bitcoin)forallT,N-class-method","name":"encode","doc":"Encode an integer into a new StaticArray.","summary":"<p>Encode an integer into a new StaticArray.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"into","external_name":"into","restriction":"StaticArray(T, N).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Int, into : StaticArray(T, N).class, alphabet : Alphabet.class = Alphabet::Bitcoin) forall T, N","args_html":"(value : Int, into : <span class=\"t\">StaticArray</span>(<span class=\"t\">T</span>, <span class=\"t\">N</span>).<span class=\"k\">class</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>) forall T, N","location":{"filename":"src/base58/encoder.cr","line_number":60,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"into","external_name":"into","restriction":"StaticArray(T, N).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"size = calculate_size_for_int(value)\nary = StaticArray(UInt8, N).new(0)\nencode_into_pointer(value, ary.to_unsafe, size, alphabet)\nary\n"}},{"html_id":"encode(value:Int,into:String.class=String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","doc":"Encode an integer into a string, taking an optional alphabet.","summary":"<p>Encode an integer into a string, taking an optional alphabet.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"into","default_value":"String","external_name":"into","restriction":"String.class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Int, into : String.class = String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Int, into : <span class=\"t\">String</span>.<span class=\"k\">class</span> = <span class=\"t\">String</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":41,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"into","default_value":"String","external_name":"into","restriction":"String.class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode_to_string(value, alphabet)"}},{"html_id":"encode(value:Int,into:Pointer.class|Pointer(UInt8).class,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","doc":"Encode an integer into a new raw allocation of memory, returning a pointer to the memory buffer,\nand the size of the buffer.","summary":"<p>Encode an integer into a new raw allocation of memory, returning a pointer to the memory buffer, and the size of the buffer.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"into","external_name":"into","restriction":"Pointer.class | Pointer(UInt8).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Int, into : Pointer.class | Pointer(UInt8).class, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Int, into : <span class=\"t\">Pointer</span>.<span class=\"k\">class</span> | <span class=\"t\">Pointer</span>(<span class=\"t\">UInt8</span>).<span class=\"k\">class</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":48,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"into","external_name":"into","restriction":"Pointer.class | Pointer(UInt8).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode_to_pointer(value, alphabet)"}},{"html_id":"encode(value:Int,into:Slice(UInt8).class,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","doc":"Encode an integer into a new Slice.","summary":"<p>Encode an integer into a new Slice.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"into","external_name":"into","restriction":"Slice(UInt8).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Int, into : Slice(UInt8).class, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Int, into : <span class=\"t\">Slice</span>(<span class=\"t\">UInt8</span>).<span class=\"k\">class</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":54,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"into","external_name":"into","restriction":"Slice(UInt8).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"Slice.new(*encode_to_pointer(value, alphabet))"}},{"html_id":"encode(value:Int,into:Array(UInt8).class,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","doc":"Encode an integer into a new Array(UInt8).","summary":"<p>Encode an integer into a new Array(UInt8).</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"into","external_name":"into","restriction":"Array(UInt8).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Int, into : Array(UInt8).class, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Int, into : <span class=\"t\">Array</span>(<span class=\"t\">UInt8</span>).<span class=\"k\">class</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":70,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"into","external_name":"into","restriction":"Array(UInt8).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode_to_array(value, alphabet)"}},{"html_id":"encode(value:Int,into:Array(Char).class,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","doc":"Encode an integer into a new Array(Char).","summary":"<p>Encode an integer into a new Array(Char).</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"into","external_name":"into","restriction":"Array(Char).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Int, into : Array(Char).class, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Int, into : <span class=\"t\">Array</span>(<span class=\"t\">Char</span>).<span class=\"k\">class</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":76,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"into","external_name":"into","restriction":"Array(Char).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"(encode_to_array(value, alphabet)).map(&.chr)"}},{"html_id":"encode(value:Int,into:String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","doc":"Encode an integer into an existing String, safely. What this does is to allocate a _new_ String\nof sufficient length to contain both the original string and the encoded value. It copies the\noriginal string into the new string, and the encodes the value directly into the string buffer\nfollowing the original string before returning the new String.","summary":"<p>Encode an integer into an existing String, safely.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"into","external_name":"into","restriction":"String"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Int, into : String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Int, into : <a href=\"String.html\">String</a>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":84,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"into","external_name":"into","restriction":"String"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"new_size = calculate_size_for_int(value)\noriginal_size = into.bytesize\nsize = original_size + new_size\nString.new(size) do |ptr|\n  ptr.copy_from(into.to_slice.to_unsafe, original_size)\n  encode_into_pointer(value, ptr + original_size, new_size, alphabet)\n  {size, size}\nend\n"}},{"html_id":"encode(value:Int,into:StringBuffer,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","doc":"Encode an integer into an existing StringBuffer, safely. What this does is to allocate a _new_ Stri","summary":"<p>Encode an integer into an existing StringBuffer, safely.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"into","external_name":"into","restriction":"StringBuffer"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Int, into : StringBuffer, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Int, into : <a href=\"StringBuffer.html\">StringBuffer</a>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":115,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"into","external_name":"into","restriction":"StringBuffer"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode_into_string(value, into.buffer, calculate_size_for_int(value), alphabet)\ninto.buffer\n"}},{"html_id":"encode(value:Int,into:Array(UInt8)|Array(Char),alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","doc":"Encode an Integer into an existing array of UInt8. ","summary":"<p>Encode an Integer into an existing array of UInt8.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"into","external_name":"into","restriction":"Array(UInt8) | Array(Char)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Int, into : Array(UInt8) | Array(Char), alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Int, into : Array(UInt8) | Array(<a href=\"Char.html\">Char</a>), alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":122,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"into","external_name":"into","restriction":"Array(UInt8) | Array(Char)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode_into_array(value, into, calculate_size_for_int(value), alphabet)"}},{"html_id":"encode(value:Int,into:Pointer(UInt8),alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","doc":"Encode an integer into an existing pointer. Most of the encoding methods end up here.","summary":"<p>Encode an integer into an existing pointer.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"into","external_name":"into","restriction":"Pointer(UInt8)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Int, into : Pointer(UInt8), alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Int, into : Pointer(UInt8), alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":128,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"into","external_name":"into","restriction":"Pointer(UInt8)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode_into_pointer(value, into, calculate_size_for_int(value), alphabet)"}},{"html_id":"encode(value:Int,into:StaticArray(UInt8,_)|Slice(UInt8),alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"into","external_name":"into","restriction":"StaticArray(UInt8, _) | Slice(UInt8)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Int, into : StaticArray(UInt8, _) | Slice(UInt8), alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Int, into : <a href=\"StaticArray.html\">StaticArray</a>(UInt8, _) | Slice(UInt8), alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":133,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"into","external_name":"into","restriction":"StaticArray(UInt8, _) | Slice(UInt8)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode_into_pointer(value, into.to_unsafe, calculate_size_for_int(value), alphabet)\ninto\n"}},{"html_id":"encode(value:String,into:StaticArray(T,N).class,alphabet:Alphabet.class=Alphabet::Bitcoin)forallT,N-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","external_name":"into","restriction":"StaticArray(T, N).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : String, into : StaticArray(T, N).class, alphabet : Alphabet.class = Alphabet::Bitcoin) forall T, N","args_html":"(value : <a href=\"String.html\">String</a>, into : <span class=\"t\">StaticArray</span>(<span class=\"t\">T</span>, <span class=\"t\">N</span>).<span class=\"k\">class</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>) forall T, N","location":{"filename":"src/base58/encoder.cr","line_number":158,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","external_name":"into","restriction":"StaticArray(T, N).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode(value.to_slice, StaticArray(UInt8, N), alphabet)"}},{"html_id":"encode(value:String,into:String.class=String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","default_value":"String","external_name":"into","restriction":"String.class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : String, into : String.class = String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : <a href=\"String.html\">String</a>, into : <span class=\"t\">String</span>.<span class=\"k\">class</span> = <span class=\"t\">String</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":139,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","default_value":"String","external_name":"into","restriction":"String.class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode(value.to_slice, String, alphabet)"}},{"html_id":"encode(value:String,check:Base58::Check,into:String.class=String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"check","external_name":"check","restriction":"Base58::Check"},{"name":"into","default_value":"String","external_name":"into","restriction":"String.class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : String, check : Base58::Check, into : String.class = String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : <a href=\"String.html\">String</a>, check : <a href=\"Base58/Check.html\">Base58::Check</a>, into : <span class=\"t\">String</span>.<span class=\"k\">class</span> = <span class=\"t\">String</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":143,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"check","external_name":"check","restriction":"Base58::Check"},{"name":"into","default_value":"String","external_name":"into","restriction":"String.class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode(value.to_slice, check, String, alphabet)"}},{"html_id":"encode(value:String,into:Pointer.class|Pointer(UInt8).class,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","external_name":"into","restriction":"Pointer.class | Pointer(UInt8).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : String, into : Pointer.class | Pointer(UInt8).class, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : <a href=\"String.html\">String</a>, into : <span class=\"t\">Pointer</span>.<span class=\"k\">class</span> | <span class=\"t\">Pointer</span>(<span class=\"t\">UInt8</span>).<span class=\"k\">class</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":148,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","external_name":"into","restriction":"Pointer.class | Pointer(UInt8).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode(value.to_slice, Pointer, alphabet)"}},{"html_id":"encode(value:String,into:Slice(UInt8).class,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","external_name":"into","restriction":"Slice(UInt8).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : String, into : Slice(UInt8).class, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : <a href=\"String.html\">String</a>, into : <span class=\"t\">Slice</span>(<span class=\"t\">UInt8</span>).<span class=\"k\">class</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":153,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","external_name":"into","restriction":"Slice(UInt8).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode(value.to_slice, Slice(UInt8), alphabet)"}},{"html_id":"encode(value:String,into:Array(UInt8).class,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","external_name":"into","restriction":"Array(UInt8).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : String, into : Array(UInt8).class, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : <a href=\"String.html\">String</a>, into : <span class=\"t\">Array</span>(<span class=\"t\">UInt8</span>).<span class=\"k\">class</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":163,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","external_name":"into","restriction":"Array(UInt8).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode(value.to_slice, Array(UInt8), alphabet)"}},{"html_id":"encode(value:String,into:Array(Char).class,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","external_name":"into","restriction":"Array(Char).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : String, into : Array(Char).class, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : <a href=\"String.html\">String</a>, into : <span class=\"t\">Array</span>(<span class=\"t\">Char</span>).<span class=\"k\">class</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":168,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","external_name":"into","restriction":"Array(Char).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode(value.to_slice, Array(Char), alphabet)"}},{"html_id":"encode(value:String,into:String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","external_name":"into","restriction":"String"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : String, into : String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : <a href=\"String.html\">String</a>, into : <a href=\"String.html\">String</a>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":173,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","external_name":"into","restriction":"String"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode(value.to_slice, into, alphabet)"}},{"html_id":"encode(value:String,into:StringBuffer,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","external_name":"into","restriction":"StringBuffer"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : String, into : StringBuffer, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : <a href=\"String.html\">String</a>, into : <a href=\"StringBuffer.html\">StringBuffer</a>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":178,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","external_name":"into","restriction":"StringBuffer"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode(value.to_slice, into, alphabet)"}},{"html_id":"encode(value:String,into:Array(UInt8)|Array(Char),alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","external_name":"into","restriction":"Array(UInt8) | Array(Char)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : String, into : Array(UInt8) | Array(Char), alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : <a href=\"String.html\">String</a>, into : Array(UInt8) | Array(<a href=\"Char.html\">Char</a>), alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":188,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","external_name":"into","restriction":"Array(UInt8) | Array(Char)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode(value.to_slice, into, alphabet)"}},{"html_id":"encode(value:String,into:Pointer(UInt8),alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","external_name":"into","restriction":"Pointer(UInt8)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : String, into : Pointer(UInt8), alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : <a href=\"String.html\">String</a>, into : Pointer(UInt8), alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":193,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","external_name":"into","restriction":"Pointer(UInt8)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode(value.to_slice, into, alphabet)"}},{"html_id":"encode(value:String,into:StaticArray(UInt8,_)|Slice(UInt8),alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","external_name":"into","restriction":"StaticArray(UInt8, _) | Slice(UInt8)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : String, into : StaticArray(UInt8, _) | Slice(UInt8), alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : <a href=\"String.html\">String</a>, into : <a href=\"StaticArray.html\">StaticArray</a>(UInt8, _) | Slice(UInt8), alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":198,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","external_name":"into","restriction":"StaticArray(UInt8, _) | Slice(UInt8)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode(value.to_slice, into, alphabet)"}},{"html_id":"encode(value:StringBuffer,into=String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"StringBuffer"},{"name":"into","default_value":"String","external_name":"into","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : StringBuffer, into = String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : <a href=\"StringBuffer.html\">StringBuffer</a>, into = <span class=\"t\">String</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":202,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"StringBuffer"},{"name":"into","default_value":"String","external_name":"into","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode(value.buffer, into, alphabet)"}},{"html_id":"encode(value:Array(UInt8),into=String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Array(UInt8)"},{"name":"into","default_value":"String","external_name":"into","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Array(UInt8), into = String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Array(UInt8), into = <span class=\"t\">String</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":207,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Array(UInt8)"},{"name":"into","default_value":"String","external_name":"into","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"ptr = (GC.malloc_atomic(SizeLookup[value.size]? || value.size)).as(::Pointer(UInt8))\nvalue.each_with_index do |byte, i|\n  ptr[i] = byte\nend\nencode(Slice.new(ptr, value.size), into, alphabet)\n"}},{"html_id":"encode(value:Array(UInt8),check:Base58::Check,into=String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Array(UInt8)"},{"name":"check","external_name":"check","restriction":"Base58::Check"},{"name":"into","default_value":"String","external_name":"into","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Array(UInt8), check : Base58::Check, into = String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Array(UInt8), check : <a href=\"Base58/Check.html\">Base58::Check</a>, into = <span class=\"t\">String</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":216,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Array(UInt8)"},{"name":"check","external_name":"check","restriction":"Base58::Check"},{"name":"into","default_value":"String","external_name":"into","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"ptr = (GC.malloc_atomic(SizeLookup[(value.size + check.prefix.bytesize) + 4]? || ((value.size + check.prefix.bytesize) + 4))).as(::Pointer(UInt8))\nvalue.each_with_index do |byte, i|\n  ptr[i] = byte\nend\nencode(Slice.new(ptr, value.size), into, alphabet)\n"}},{"html_id":"encode(value:Array(Char),into=String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Array(Char)"},{"name":"into","default_value":"String","external_name":"into","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Array(Char), into = String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Array(<a href=\"Char.html\">Char</a>), into = <span class=\"t\">String</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":225,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Array(Char)"},{"name":"into","default_value":"String","external_name":"into","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"ptr = (GC.malloc_atomic(SizeLookup[value.size]? || value.size)).as(::Pointer(UInt8))\nvalue.each_with_index do |byte, i|\n  ptr[i] = byte.ord.to_u8\nend\nencode(Slice.new(ptr, value.size), into, alphabet)\n"}},{"html_id":"encode(value:Array(Char),check:Base58::Check,into=String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Array(Char)"},{"name":"check","external_name":"check","restriction":"Base58::Check"},{"name":"into","default_value":"String","external_name":"into","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Array(Char), check : Base58::Check, into = String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Array(<a href=\"Char.html\">Char</a>), check : <a href=\"Base58/Check.html\">Base58::Check</a>, into = <span class=\"t\">String</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":234,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Array(Char)"},{"name":"check","external_name":"check","restriction":"Base58::Check"},{"name":"into","default_value":"String","external_name":"into","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"ptr = (GC.malloc_atomic(SizeLookup[(value.size + check.prefix.bytesize) + 4]? || ((value.size + check.prefix.bytesize) + 4))).as(::Pointer(UInt8))\nvalue.each_with_index do |byte, i|\n  ptr[i] = byte.ord.to_u8\nend\nencode(Slice.new(ptr, value.size), into, alphabet)\n"}},{"html_id":"encode(value:Slice(UInt8)|StaticArray(UInt8,_),into:String.class=String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","default_value":"String","external_name":"into","restriction":"String.class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Slice(UInt8) | StaticArray(UInt8, _), into : String.class = String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Slice(UInt8) | <a href=\"StaticArray.html\">StaticArray</a>(UInt8, _), into : <span class=\"t\">String</span>.<span class=\"k\">class</span> = <span class=\"t\">String</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":243,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","default_value":"String","external_name":"into","restriction":"String.class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode_to_string(value.to_unsafe, value.size, alphabet)"}},{"html_id":"encode(value:Slice(UInt8)|StaticArray(UInt8,_),check:Base58::Check,into:String.class=String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"check","external_name":"check","restriction":"Base58::Check"},{"name":"into","default_value":"String","external_name":"into","restriction":"String.class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Slice(UInt8) | StaticArray(UInt8, _), check : Base58::Check, into : String.class = String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Slice(UInt8) | <a href=\"StaticArray.html\">StaticArray</a>(UInt8, _), check : <a href=\"Base58/Check.html\">Base58::Check</a>, into : <span class=\"t\">String</span>.<span class=\"k\">class</span> = <span class=\"t\">String</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":248,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"check","external_name":"check","restriction":"Base58::Check"},{"name":"into","default_value":"String","external_name":"into","restriction":"String.class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode_to_string(value.to_unsafe, value.size, check, alphabet)"}},{"html_id":"encode(value:Slice(UInt8)|StaticArray(UInt8,_),into:StringBuffer.class,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"StringBuffer.class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Slice(UInt8) | StaticArray(UInt8, _), into : StringBuffer.class, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Slice(UInt8) | <a href=\"StaticArray.html\">StaticArray</a>(UInt8, _), into : <span class=\"t\">StringBuffer</span>.<span class=\"k\">class</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":253,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"StringBuffer.class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"buffer = StringBuffer.new(SizeLookup[value.size]? || (value.size * 2))\nencode_into_string(value.to_unsafe, buffer.buffer, value.bytesize, alphabet)\nbuffer\n"}},{"html_id":"encode(value:Slice(UInt8)|StaticArray(UInt8,_),into:StringBuffer.class,check:Base58::Check,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"StringBuffer.class"},{"name":"check","external_name":"check","restriction":"Base58::Check"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Slice(UInt8) | StaticArray(UInt8, _), into : StringBuffer.class, check : Base58::Check, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Slice(UInt8) | <a href=\"StaticArray.html\">StaticArray</a>(UInt8, _), into : <span class=\"t\">StringBuffer</span>.<span class=\"k\">class</span>, check : <a href=\"Base58/Check.html\">Base58::Check</a>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":260,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"StringBuffer.class"},{"name":"check","external_name":"check","restriction":"Base58::Check"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"buffer = StringBuffer.new(SizeLookup[(value.size + check.prefix.bytesize) + 4]? || (((value.size + check.prefix.bytesize) + 4) * 2))\nencode_into_string(value.to_unsafe, buffer.buffer, value.bytesize, alphabet)\nbuffer\n"}},{"html_id":"encode(value:Slice(UInt8)|StaticArray(UInt8,_),into:Pointer.class|Pointer(UInt8).class,alphabet:Alphabet.class=Alphabet::Bitcoin):Tuple(Pointer(UInt8),Int32)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"Pointer.class | Pointer(UInt8).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Slice(UInt8) | StaticArray(UInt8, _), into : Pointer.class | Pointer(UInt8).class, alphabet : Alphabet.class = Alphabet::Bitcoin) : Tuple(Pointer(UInt8), Int32)","args_html":"(value : Slice(UInt8) | <a href=\"StaticArray.html\">StaticArray</a>(UInt8, _), into : <span class=\"t\">Pointer</span>.<span class=\"k\">class</span> | <span class=\"t\">Pointer</span>(<span class=\"t\">UInt8</span>).<span class=\"k\">class</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>) : Tuple(Pointer(UInt8), Int32)","location":{"filename":"src/base58/encoder.cr","line_number":267,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"Pointer.class | Pointer(UInt8).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"return_type":"Tuple(Pointer(UInt8), Int32)","visibility":"Public","body":"pointer, final_size = encode_to_pointer(value.to_unsafe, value.bytesize, alphabet)\n{pointer, final_size}\n"}},{"html_id":"encode(value:Slice(UInt8)|StaticArray(UInt8,_),into:Slice(UInt8).class,alphabet:Alphabet.class=Alphabet::Bitcoin):Slice(UInt8)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"Slice(UInt8).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Slice(UInt8) | StaticArray(UInt8, _), into : Slice(UInt8).class, alphabet : Alphabet.class = Alphabet::Bitcoin) : Slice(UInt8)","args_html":"(value : Slice(UInt8) | <a href=\"StaticArray.html\">StaticArray</a>(UInt8, _), into : <span class=\"t\">Slice</span>(<span class=\"t\">UInt8</span>).<span class=\"k\">class</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>) : Slice(UInt8)","location":{"filename":"src/base58/encoder.cr","line_number":273,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"Slice(UInt8).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"return_type":"Slice(UInt8)","visibility":"Public","body":"Slice.new(*encode_to_pointer(value.to_unsafe, value.bytesize, alphabet))"}},{"html_id":"encode(value:Slice(UInt8)|StaticArray(UInt8,_),into:StaticArray(UInt8,N).class,alphabet:Alphabet.class=Alphabet::Bitcoin)forallN-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"StaticArray(UInt8, N).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Slice(UInt8) | StaticArray(UInt8, _), into : StaticArray(UInt8, N).class, alphabet : Alphabet.class = Alphabet::Bitcoin) forall N","args_html":"(value : Slice(UInt8) | <a href=\"StaticArray.html\">StaticArray</a>(UInt8, _), into : <span class=\"t\">StaticArray</span>(<span class=\"t\">UInt8</span>, <span class=\"t\">N</span>).<span class=\"k\">class</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>) forall N","location":{"filename":"src/base58/encoder.cr","line_number":278,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"StaticArray(UInt8, N).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"ary = StaticArray(UInt8, N).new(0)\n_, final_size = encode_into_pointer(value.to_unsafe, ary.to_unsafe, value.size, alphabet)\n{ary, final_size}\n"}},{"html_id":"encode(value:Slice(UInt8)|StaticArray(UInt8,_),into:Array(UInt8).class,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"Array(UInt8).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Slice(UInt8) | StaticArray(UInt8, _), into : Array(UInt8).class, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Slice(UInt8) | <a href=\"StaticArray.html\">StaticArray</a>(UInt8, _), into : <span class=\"t\">Array</span>(<span class=\"t\">UInt8</span>).<span class=\"k\">class</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":286,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"Array(UInt8).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode_to_array(value, alphabet)"}},{"html_id":"encode(value:Slice(UInt8)|StaticArray(UInt8,_),into:Array(Char).class,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"Array(Char).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Slice(UInt8) | StaticArray(UInt8, _), into : Array(Char).class, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Slice(UInt8) | <a href=\"StaticArray.html\">StaticArray</a>(UInt8, _), into : <span class=\"t\">Array</span>(<span class=\"t\">Char</span>).<span class=\"k\">class</span>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":291,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"Array(Char).class"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"(encode_to_array(value, alphabet)).map(&.chr)"}},{"html_id":"encode(value:Slice(UInt8)|StaticArray(UInt8,_),into:String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"String"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Slice(UInt8) | StaticArray(UInt8, _), into : String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Slice(UInt8) | <a href=\"StaticArray.html\">StaticArray</a>(UInt8, _), into : <a href=\"String.html\">String</a>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":296,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"String"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"original_size = into.bytesize\nbuffer_size = SizeLookup[value.size]? || (value.size * 2)\nsize = original_size + buffer_size\nString.new(size) do |ptr|\n  ptr.copy_from(into.to_slice.to_unsafe, original_size)\n  _, final_size = encode_into_pointer(value.to_unsafe, ptr + original_size, value.size, alphabet)\n  {original_size + final_size, original_size + final_size}\nend\n"}},{"html_id":"encode(value:Slice(UInt8)|StaticArray(UInt8,_),check:Base58::Check,into:String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"check","external_name":"check","restriction":"Base58::Check"},{"name":"into","external_name":"into","restriction":"String"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Slice(UInt8) | StaticArray(UInt8, _), check : Base58::Check, into : String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Slice(UInt8) | <a href=\"StaticArray.html\">StaticArray</a>(UInt8, _), check : <a href=\"Base58/Check.html\">Base58::Check</a>, into : <a href=\"String.html\">String</a>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":308,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"check","external_name":"check","restriction":"Base58::Check"},{"name":"into","external_name":"into","restriction":"String"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"original_size = into.bytesize\nbuffer_size = SizeLookup[(value.size + check.prefix.bytesize) + 4]? || (((value.size + check.prefix.bytesize) + 4) * 2)\nsize = original_size + buffer_size\nString.new(size) do |ptr|\n  ptr.copy_from(into.to_slice.to_unsafe, original_size)\n  _, final_size = encode_into_pointer(value.to_unsafe, ptr + original_size, value.size, alphabet)\n  {original_size + final_size, original_size + final_size}\nend\n"}},{"html_id":"encode(value:Slice(UInt8)|StaticArray(UInt8,_),into:String,mutate:Bool,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"String"},{"name":"mutate","external_name":"mutate","restriction":"Bool"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Slice(UInt8) | StaticArray(UInt8, _), into : String, mutate : Bool, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Slice(UInt8) | <a href=\"StaticArray.html\">StaticArray</a>(UInt8, _), into : <a href=\"String.html\">String</a>, mutate : Bool, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":320,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"String"},{"name":"mutate","external_name":"mutate","restriction":"Bool"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"if mutate\n  unsafe_encode(value, into, alphabet)\nelse\n  encode(value, into, alphabet)\nend"}},{"html_id":"encode(value:Slice(UInt8)|StaticArray(UInt8,_),into:StringBuffer,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"StringBuffer"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Slice(UInt8) | StaticArray(UInt8, _), into : StringBuffer, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Slice(UInt8) | <a href=\"StaticArray.html\">StaticArray</a>(UInt8, _), into : <a href=\"StringBuffer.html\">StringBuffer</a>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":329,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"StringBuffer"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode_into_string(value.to_unsafe, into.buffer, value.bytesize, alphabet)"}},{"html_id":"encode(value:Slice(UInt8)|StaticArray(UInt8,_),into:Array(UInt8)|Array(Char),alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"Array(UInt8) | Array(Char)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Slice(UInt8) | StaticArray(UInt8, _), into : Array(UInt8) | Array(Char), alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Slice(UInt8) | <a href=\"StaticArray.html\">StaticArray</a>(UInt8, _), into : Array(UInt8) | Array(<a href=\"Char.html\">Char</a>), alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":339,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"Array(UInt8) | Array(Char)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode_into_array(value.to_unsafe, into, value.size, alphabet)"}},{"html_id":"encode(value:Slice(UInt8)|StaticArray(UInt8,_),into:Pointer(UInt8),alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"Pointer(UInt8)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Slice(UInt8) | StaticArray(UInt8, _), into : Pointer(UInt8), alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Slice(UInt8) | <a href=\"StaticArray.html\">StaticArray</a>(UInt8, _), into : Pointer(UInt8), alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":344,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"Pointer(UInt8)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode_into_pointer(value.to_unsafe, into, value.size, alphabet)"}},{"html_id":"encode(value:Slice(UInt8)|StaticArray(UInt8,_),into:StaticArray(UInt8,_)|Slice(UInt8),alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"StaticArray(UInt8, _) | Slice(UInt8)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Slice(UInt8) | StaticArray(UInt8, _), into : StaticArray(UInt8, _) | Slice(UInt8), alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Slice(UInt8) | <a href=\"StaticArray.html\">StaticArray</a>(UInt8, _), into : <a href=\"StaticArray.html\">StaticArray</a>(UInt8, _) | Slice(UInt8), alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":349,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"into","external_name":"into","restriction":"StaticArray(UInt8, _) | Slice(UInt8)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode_into_pointer(value.to_unsafe, into.to_unsafe, value.size, alphabet)\ninto\n"}},{"html_id":"encode_to_array(value:Int,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode_to_array","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Int, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Int, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":357,"url":null},"def":{"name":"encode_to_array","args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"size = calculate_size_for_int(value)\npointer, _ = encode_to_pointer(value, alphabet)\nArray(UInt8).new(size) do |i|\n  pointer[i]\nend\n"}},{"html_id":"encode_to_array(value:Slice(UInt8)|StaticArray(UInt8,_),alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode_to_array","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Slice(UInt8) | StaticArray(UInt8, _), alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Slice(UInt8) | <a href=\"StaticArray.html\">StaticArray</a>(UInt8, _), alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":365,"url":null},"def":{"name":"encode_to_array","args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt8, _)"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"pointer, final_size = encode_to_pointer(value.to_unsafe, value.size, alphabet)\nArray(UInt8).new(final_size) do |i|\n  pointer[i]\nend\n"}},{"html_id":"encode_to_pointer(value:Pointer(UInt8),size:Int,check:Base58::Check,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode_to_pointer","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int"},{"name":"check","external_name":"check","restriction":"Base58::Check"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Pointer(UInt8), size : Int, check : Base58::Check, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Pointer(UInt8), size : Int, check : <a href=\"Base58/Check.html\">Base58::Check</a>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":388,"url":null},"def":{"name":"encode_to_pointer","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int"},{"name":"check","external_name":"check","restriction":"Base58::Check"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"index = 0\nbuffer_size = SizeLookup[(size + check.prefix.bytesize) + 4]? || (((size + check.prefix.bytesize) + 4) * 2)\nptr = (GC.malloc_atomic(buffer_size)).as(::Pointer(UInt8))\nencode_into_pointer(value, ptr, size, alphabet)\n"}},{"html_id":"encode_to_pointer(value:Int,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode_to_pointer","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Int, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Int, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":373,"url":null},"def":{"name":"encode_to_pointer","args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"size = calculate_size_for_int(value)\nptr = (GC.malloc_atomic(size)).as(::Pointer(UInt8))\nencode_into_pointer(value, ptr, size, alphabet)\n"}},{"html_id":"encode_to_pointer(value:Pointer(UInt8),size:Int,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode_to_pointer","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Pointer(UInt8), size : Int, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Pointer(UInt8), size : Int, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":380,"url":null},"def":{"name":"encode_to_pointer","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"index = 0\nbuffer_size = SizeLookup[size]? || (size * 2)\nptr = (GC.malloc_atomic(buffer_size)).as(::Pointer(UInt8))\nencode_into_pointer(value, ptr, size, alphabet)\n"}},{"html_id":"encode_to_string(value:Pointer(UInt8),size:Int,check:Base58::Check,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode_to_string","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int"},{"name":"check","external_name":"check","restriction":"Base58::Check"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Pointer(UInt8), size : Int, check : Base58::Check, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Pointer(UInt8), size : Int, check : <a href=\"Base58/Check.html\">Base58::Check</a>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":414,"url":null},"def":{"name":"encode_to_string","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int"},{"name":"check","external_name":"check","restriction":"Base58::Check"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"buffer_size = SizeLookup[(size + check.prefix.bytesize) + 4]? || (((size + check.prefix.bytesize) + 4) * 2)\nString.new(buffer_size) do |ptr|\n  _, final_size = encode_into_pointer(value, ptr, size, check, alphabet)\n  {final_size, final_size}\nend\n"}},{"html_id":"encode_to_string(value:Int,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode_to_string","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Int, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Int, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":396,"url":null},"def":{"name":"encode_to_string","args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"size = calculate_size_for_int(value)\nString.new(size) do |ptr|\n  encode_into_pointer(value, ptr, size, alphabet)\n  {size, size}\nend\n"}},{"html_id":"encode_to_string(value:Pointer(UInt8),size:Int,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"encode_to_string","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Pointer(UInt8), size : Int, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Pointer(UInt8), size : Int, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":405,"url":null},"def":{"name":"encode_to_string","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"buffer_size = SizeLookup[size]? || ((size) * 2)\nString.new(buffer_size) do |ptr|\n  _, final_size = encode_into_pointer(value, ptr, size, alphabet)\n  {final_size, final_size}\nend\n"}},{"html_id":"primary_decoding(value:Pointer(UInt8),pointer:Pointer(UInt8),size:Int,index:Int,pointer_index:Int,alphabet:Alphabet.class)-class-method","name":"primary_decoding","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"pointer","external_name":"pointer","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int"},{"name":"index","external_name":"index","restriction":"Int"},{"name":"pointer_index","external_name":"pointer_index","restriction":"Int"},{"name":"alphabet","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Pointer(UInt8), pointer : Pointer(UInt8), size : Int, index : Int, pointer_index : Int, alphabet : Alphabet.class)","args_html":"(value : Pointer(UInt8), pointer : Pointer(UInt8), size : Int, index : Int, pointer_index : Int, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span>)","location":{"filename":"src/base58/decoder.cr","line_number":209,"url":null},"def":{"name":"primary_decoding","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"pointer","external_name":"pointer","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int"},{"name":"index","external_name":"index","restriction":"Int"},{"name":"pointer_index","external_name":"pointer_index","restriction":"Int"},{"name":"alphabet","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"pointer_index = 0\nwhile index < size\n  val = (alphabet.inverse(value[index])).to_u16\n  inner_idx = 0\n  while inner_idx < pointer_index\n    byte = pointer[inner_idx]\n    val = val + (byte.to_u16 * 58)\n    pointer[inner_idx] = (val & 255).to_u8\n    val = val >> 8\n    inner_idx = inner_idx + 1\n  end\n  while val > 0\n    pointer[pointer_index] = (val & 255).to_u8\n    pointer_index = pointer_index + 1\n    val = val >> 8\n  end\n  index = index + 1\nend\n{index, pointer_index}\n"}},{"html_id":"reverse_decoding(pointer,pointer_index)-class-method","name":"reverse_decoding","abstract":false,"args":[{"name":"pointer","external_name":"pointer","restriction":""},{"name":"pointer_index","external_name":"pointer_index","restriction":""}],"args_string":"(pointer, pointer_index)","args_html":"(pointer, pointer_index)","location":{"filename":"src/base58/decoder.cr","line_number":247,"url":null},"def":{"name":"reverse_decoding","args":[{"name":"pointer","external_name":"pointer","restriction":""},{"name":"pointer_index","external_name":"pointer_index","restriction":""}],"visibility":"Public","body":"front_pos = 0\nback_pos = pointer_index - 1\nwhile front_pos <= back_pos\n  pointer[front_pos], pointer[back_pos] = pointer[back_pos], pointer[front_pos]\n  front_pos = front_pos + 1\n  back_pos = back_pos - 1\nend\n"}},{"html_id":"unsafe_decode(value:Pointer(UInt8),size:Int32,into:String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"unsafe_decode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"String"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Pointer(UInt8), size : Int32, into : String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Pointer(UInt8), size : Int32, into : <a href=\"String.html\">String</a>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":126,"url":null},"def":{"name":"unsafe_decode","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"into","external_name":"into","restriction":"String"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"_, final_size = decode_into_pointer(value, into.to_slice.to_unsafe, size, alphabet)\nheader = into.as(::Pointer(::Tuple(Int32, Int32, Int32)))\nheader.value = {String::TYPE_ID, final_size, final_size}\ninto\n"}},{"html_id":"unsafe_encode(value:Int,into:String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"unsafe_encode","doc":"Encode an integer into an existing String the unsafe way. Crystal strings are immutable, but\none can work around that. A String's maximum capacity can not be increased, and the burden\nhere in on the programmer to _ensure_ that the string that is being encoded into has enough\ncapacity for the encoded value.\n\nThe encoded value will replace the previous value in the string.\n\n```\nstring = (0123456789) * 7\nencoded = Base58.encode(\"encode me, please\", string)\nputs encoded # => \"\"xHSYK7uPSx96i9tu3tVH5Ak\"\n```\n","summary":"<p>Encode an integer into an existing String the unsafe way.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"into","external_name":"into","restriction":"String"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Int, into : String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Int, into : <a href=\"String.html\">String</a>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":109,"url":null},"def":{"name":"unsafe_encode","args":[{"name":"value","external_name":"value","restriction":"Int"},{"name":"into","external_name":"into","restriction":"String"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode_into_string(value, into, calculate_size_for_int(value), alphabet)"}},{"html_id":"unsafe_encode(value:String,into:String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"unsafe_encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","external_name":"into","restriction":"String"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : String, into : String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : <a href=\"String.html\">String</a>, into : <a href=\"String.html\">String</a>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":183,"url":null},"def":{"name":"unsafe_encode","args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"into","external_name":"into","restriction":"String"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"unsafe_encode(value.to_slice, into, alphabet)"}},{"html_id":"unsafe_encode(value:Slice(UInt8)|StaticArray(UInt,_),into:String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"unsafe_encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt, _)"},{"name":"into","external_name":"into","restriction":"String"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Slice(UInt8) | StaticArray(UInt, _), into : String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Slice(UInt8) | <a href=\"StaticArray.html\">StaticArray</a>(UInt, _), into : <a href=\"String.html\">String</a>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":334,"url":null},"def":{"name":"unsafe_encode","args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8) | StaticArray(UInt, _)"},{"name":"into","external_name":"into","restriction":"String"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode_into_string(value.to_unsafe, into, value.bytesize, alphabet)"}},{"html_id":"validate_checksum(pointer,pointer_index,check)-class-method","name":"validate_checksum","abstract":false,"args":[{"name":"pointer","external_name":"pointer","restriction":""},{"name":"pointer_index","external_name":"pointer_index","restriction":""},{"name":"check","external_name":"check","restriction":""}],"args_string":"(pointer, pointer_index, check)","args_html":"(pointer, pointer_index, check)","location":{"filename":"src/base58/decoder.cr","line_number":278,"url":null},"def":{"name":"validate_checksum","args":[{"name":"pointer","external_name":"pointer","restriction":""},{"name":"pointer_index","external_name":"pointer_index","restriction":""},{"name":"check","external_name":"check","restriction":""}],"visibility":"Public","body":"if validate_checksum?(pointer, pointer_index, check)\n  true\nelse\n  raise(ChecksumMismatch.new(\"Checksum Mismatch; expected #{(Slice.new(pointer, pointer_index))[-4..].hexstring}, but found #{CheckBuffer[0..3].hexstring}\"))\nend"}},{"html_id":"validate_checksum?(pointer,pointer_index,check)-class-method","name":"validate_checksum?","abstract":false,"args":[{"name":"pointer","external_name":"pointer","restriction":""},{"name":"pointer_index","external_name":"pointer_index","restriction":""},{"name":"check","external_name":"check","restriction":""}],"args_string":"(pointer, pointer_index, check)","args_html":"(pointer, pointer_index, check)","location":{"filename":"src/base58/decoder.cr","line_number":258,"url":null},"def":{"name":"validate_checksum?","args":[{"name":"pointer","external_name":"pointer","restriction":""},{"name":"pointer_index","external_name":"pointer_index","restriction":""},{"name":"check","external_name":"check","restriction":""}],"visibility":"Public","body":"slice = Slice.new(pointer, pointer_index)\npayload = slice[..-4]\nchecksum = slice[-4..]\ncase check.type\nwhen Checksum::Base58Check\n  calculate_base58check_checksum(\"\", pointer, pointer_index - 4)\nelse\n  calculate_cb58_checksum(\"\", pointer, pointer_index - 4)\nend\nif checksum == CheckBuffer[0..3]\n  true\nelse\n  nil\nend\n"}},{"html_id":"zero_padding(value:Pointer(UInt8),pointer:Pointer(UInt8),size:Int,pointer_index:Int,zer0:UInt8)-class-method","name":"zero_padding","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"pointer","external_name":"pointer","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int"},{"name":"pointer_index","external_name":"pointer_index","restriction":"Int"},{"name":"zer0","external_name":"zer0","restriction":"UInt8"}],"args_string":"(value : Pointer(UInt8), pointer : Pointer(UInt8), size : Int, pointer_index : Int, zer0 : UInt8)","args_html":"(value : Pointer(UInt8), pointer : Pointer(UInt8), size : Int, pointer_index : Int, zer0 : UInt8)","location":{"filename":"src/base58/decoder.cr","line_number":234,"url":null},"def":{"name":"zero_padding","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"pointer","external_name":"pointer","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int"},{"name":"pointer_index","external_name":"pointer_index","restriction":"Int"},{"name":"zer0","external_name":"zer0","restriction":"UInt8"}],"visibility":"Public","body":"index = 0\nwhile index < size\n  if value[index] != zer0\n    break\n  end\n  pointer[pointer_index] = 0\n  pointer_index = pointer_index + 1\n  index = index + 1\nend\npointer_index\n"}}],"types":[{"html_id":"base58/Base58/Alphabet","path":"Base58/Alphabet.html","kind":"class","full_name":"Base58::Alphabet","name":"Alphabet","abstract":false,"superclass":{"html_id":"base58/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"base58/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"base58/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/base58/alphabet.cr","line_number":3,"url":null},{"filename":"src/base58/alphabet/bitcoin.cr","line_number":4,"url":null},{"filename":"src/base58/alphabet/flickr.cr","line_number":4,"url":null},{"filename":"src/base58/alphabet/ipfs.cr","line_number":4,"url":null},{"filename":"src/base58/alphabet/monero.cr","line_number":4,"url":null},{"filename":"src/base58/alphabet/ripple.cr","line_number":4,"url":null}],"repository_name":"base58","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"base58/Base58/Alphabet/Bitcoin","kind":"class","full_name":"Base58::Alphabet::Bitcoin","name":"Bitcoin"},{"html_id":"base58/Base58/Alphabet/Flickr","kind":"class","full_name":"Base58::Alphabet::Flickr","name":"Flickr"},{"html_id":"base58/Base58/Alphabet/Monero","kind":"class","full_name":"Base58::Alphabet::Monero","name":"Monero"},{"html_id":"base58/Base58/Alphabet/Ripple","kind":"class","full_name":"Base58::Alphabet::Ripple","name":"Ripple"}],"namespace":{"html_id":"base58/Base58","kind":"module","full_name":"Base58","name":"Base58"},"doc":"This is the base class for Base58 Alphabet implementations. It is not intended to be used directly.","summary":"<p>This is the base class for Base58 Alphabet implementations.</p>","types":[{"html_id":"base58/Base58/Alphabet/Bitcoin","path":"Base58/Alphabet/Bitcoin.html","kind":"class","full_name":"Base58::Alphabet::Bitcoin","name":"Bitcoin","abstract":false,"superclass":{"html_id":"base58/Base58/Alphabet","kind":"class","full_name":"Base58::Alphabet","name":"Alphabet"},"ancestors":[{"html_id":"base58/Base58/Alphabet","kind":"class","full_name":"Base58::Alphabet","name":"Alphabet"},{"html_id":"base58/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"base58/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/base58/alphabet/bitcoin.cr","line_number":12,"url":null}],"repository_name":"base58","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"BaseToUInt","name":"BaseToUInt","value":"UInt8.static_array(49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122)"},{"id":"UIntToBase","name":"UIntToBase","value":"UInt8.static_array(0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 9, 10, 11, 12, 13, 14, 15, 16, 0_u8, 17, 18, 19, 20, 21, 0_u8, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0_u8, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8)"}],"subclasses":[{"html_id":"base58/Base58/Alphabet/IPFS","kind":"class","full_name":"Base58::Alphabet::IPFS","name":"IPFS"}],"namespace":{"html_id":"base58/Base58/Alphabet","kind":"class","full_name":"Base58::Alphabet","name":"Alphabet"},"doc":"The modern usage of Base58 can be traced back to 2009. It appears that [Flickr](https://www.flickr.com/groups/api/discuss/72157616713786392/)\nwas using it before [Bitcoin](https://github.com/bitcoin/bitcoin/blob/v0.1.5/base58.h#L7), but Bitcoin gets all the glory, so most general purpose\nBase58 implementations, including this one, use Bitcoin's alphabet as the default. It differs from the Flickr alphabet in that the Bitcoin\nalphabet has the capital letters preceeding the lowercase letters, and like Flickr, it excludes the characters `0`, `O`, `I`, and `l`.\n\n`123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz`\n","summary":"<p>The modern usage of Base58 can be traced back to 2009.</p>","class_methods":[{"html_id":"[](val)-class-method","name":"[]","doc":"The modern usage of Base58 can be traced back to 2009. It appears that [Flickr](https://www.flickr.com/groups/api/discuss/72157616713786392/)\nwas using it before [Bitcoin](https://github.com/bitcoin/bitcoin/blob/v0.1.5/base58.h#L7), but Bitcoin gets all the glory, so most general purpose\nBase58 implementations, including this one, use Bitcoin's alphabet as the default. It differs from the Flickr alphabet in that the Bitcoin\nalphabet has the capital letters preceeding the lowercase letters, and like Flickr, it excludes the characters `0`, `O`, `I`, and `l`.\n\n`123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz`\n","summary":"<p>The modern usage of Base58 can be traced back to 2009.</p>","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/base58/alphabet/bitcoin.cr","line_number":12,"url":null},"def":{"name":"[]","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"BaseToUInt[val]"}},{"html_id":"[]?(val)-class-method","name":"[]?","doc":"The modern usage of Base58 can be traced back to 2009. It appears that [Flickr](https://www.flickr.com/groups/api/discuss/72157616713786392/)\nwas using it before [Bitcoin](https://github.com/bitcoin/bitcoin/blob/v0.1.5/base58.h#L7), but Bitcoin gets all the glory, so most general purpose\nBase58 implementations, including this one, use Bitcoin's alphabet as the default. It differs from the Flickr alphabet in that the Bitcoin\nalphabet has the capital letters preceeding the lowercase letters, and like Flickr, it excludes the characters `0`, `O`, `I`, and `l`.\n\n`123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz`\n","summary":"<p>The modern usage of Base58 can be traced back to 2009.</p>","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/base58/alphabet/bitcoin.cr","line_number":12,"url":null},"def":{"name":"[]?","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"BaseToUInt[val]?"}},{"html_id":"inverse(val)-class-method","name":"inverse","doc":"The modern usage of Base58 can be traced back to 2009. It appears that [Flickr](https://www.flickr.com/groups/api/discuss/72157616713786392/)\nwas using it before [Bitcoin](https://github.com/bitcoin/bitcoin/blob/v0.1.5/base58.h#L7), but Bitcoin gets all the glory, so most general purpose\nBase58 implementations, including this one, use Bitcoin's alphabet as the default. It differs from the Flickr alphabet in that the Bitcoin\nalphabet has the capital letters preceeding the lowercase letters, and like Flickr, it excludes the characters `0`, `O`, `I`, and `l`.\n\n`123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz`\n","summary":"<p>The modern usage of Base58 can be traced back to 2009.</p>","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/base58/alphabet/bitcoin.cr","line_number":12,"url":null},"def":{"name":"inverse","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"UIntToBase[val]"}},{"html_id":"inverse?(val)-class-method","name":"inverse?","doc":"The modern usage of Base58 can be traced back to 2009. It appears that [Flickr](https://www.flickr.com/groups/api/discuss/72157616713786392/)\nwas using it before [Bitcoin](https://github.com/bitcoin/bitcoin/blob/v0.1.5/base58.h#L7), but Bitcoin gets all the glory, so most general purpose\nBase58 implementations, including this one, use Bitcoin's alphabet as the default. It differs from the Flickr alphabet in that the Bitcoin\nalphabet has the capital letters preceeding the lowercase letters, and like Flickr, it excludes the characters `0`, `O`, `I`, and `l`.\n\n`123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz`\n","summary":"<p>The modern usage of Base58 can be traced back to 2009.</p>","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/base58/alphabet/bitcoin.cr","line_number":12,"url":null},"def":{"name":"inverse?","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"byte = UIntToBase[val]?\nbyte && (byte != 0) ? byte : nil\n"}}]},{"html_id":"base58/Base58/Alphabet/Flickr","path":"Base58/Alphabet/Flickr.html","kind":"class","full_name":"Base58::Alphabet::Flickr","name":"Flickr","abstract":false,"superclass":{"html_id":"base58/Base58/Alphabet","kind":"class","full_name":"Base58::Alphabet","name":"Alphabet"},"ancestors":[{"html_id":"base58/Base58/Alphabet","kind":"class","full_name":"Base58::Alphabet","name":"Alphabet"},{"html_id":"base58/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"base58/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/base58/alphabet/flickr.cr","line_number":12,"url":null}],"repository_name":"base58","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"BaseToUInt","name":"BaseToUInt","value":"UInt8.static_array(49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90)"},{"id":"UIntToBase","name":"UIntToBase","value":"UInt8.static_array(0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 34, 35, 36, 37, 38, 39, 40, 41, 0_u8, 42, 43, 44, 45, 46, 0_u8, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0_u8, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8)"}],"namespace":{"html_id":"base58/Base58/Alphabet","kind":"class","full_name":"Base58::Alphabet","name":"Alphabet"},"doc":"The modern usage of Base58 can be traced back to 2009. It appears that [Flickr](https://www.flickr.com/groups/api/discuss/72157616713786392/)\nwas using it before [Bitcoin](https://github.com/bitcoin/bitcoin/blob/v0.1.5/base58.h#L7), but Bitcoin gets all the glory, so most general purpose\nBase58 implementations, including this one, use Bitcoin's alphabet as the default. The Flickr alphabet differs from the Bitcoin alphabet in that\nthe Flickr alphabet has the lowercase letters preeceding the uppercase letters.\n\n`123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ`\n","summary":"<p>The modern usage of Base58 can be traced back to 2009.</p>","class_methods":[{"html_id":"[](val)-class-method","name":"[]","doc":"The modern usage of Base58 can be traced back to 2009. It appears that [Flickr](https://www.flickr.com/groups/api/discuss/72157616713786392/)\nwas using it before [Bitcoin](https://github.com/bitcoin/bitcoin/blob/v0.1.5/base58.h#L7), but Bitcoin gets all the glory, so most general purpose\nBase58 implementations, including this one, use Bitcoin's alphabet as the default. The Flickr alphabet differs from the Bitcoin alphabet in that\nthe Flickr alphabet has the lowercase letters preeceding the uppercase letters.\n\n`123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ`\n","summary":"<p>The modern usage of Base58 can be traced back to 2009.</p>","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/base58/alphabet/flickr.cr","line_number":12,"url":null},"def":{"name":"[]","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"BaseToUInt[val]"}},{"html_id":"[]?(val)-class-method","name":"[]?","doc":"The modern usage of Base58 can be traced back to 2009. It appears that [Flickr](https://www.flickr.com/groups/api/discuss/72157616713786392/)\nwas using it before [Bitcoin](https://github.com/bitcoin/bitcoin/blob/v0.1.5/base58.h#L7), but Bitcoin gets all the glory, so most general purpose\nBase58 implementations, including this one, use Bitcoin's alphabet as the default. The Flickr alphabet differs from the Bitcoin alphabet in that\nthe Flickr alphabet has the lowercase letters preeceding the uppercase letters.\n\n`123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ`\n","summary":"<p>The modern usage of Base58 can be traced back to 2009.</p>","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/base58/alphabet/flickr.cr","line_number":12,"url":null},"def":{"name":"[]?","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"BaseToUInt[val]?"}},{"html_id":"inverse(val)-class-method","name":"inverse","doc":"The modern usage of Base58 can be traced back to 2009. It appears that [Flickr](https://www.flickr.com/groups/api/discuss/72157616713786392/)\nwas using it before [Bitcoin](https://github.com/bitcoin/bitcoin/blob/v0.1.5/base58.h#L7), but Bitcoin gets all the glory, so most general purpose\nBase58 implementations, including this one, use Bitcoin's alphabet as the default. The Flickr alphabet differs from the Bitcoin alphabet in that\nthe Flickr alphabet has the lowercase letters preeceding the uppercase letters.\n\n`123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ`\n","summary":"<p>The modern usage of Base58 can be traced back to 2009.</p>","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/base58/alphabet/flickr.cr","line_number":12,"url":null},"def":{"name":"inverse","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"UIntToBase[val]"}},{"html_id":"inverse?(val)-class-method","name":"inverse?","doc":"The modern usage of Base58 can be traced back to 2009. It appears that [Flickr](https://www.flickr.com/groups/api/discuss/72157616713786392/)\nwas using it before [Bitcoin](https://github.com/bitcoin/bitcoin/blob/v0.1.5/base58.h#L7), but Bitcoin gets all the glory, so most general purpose\nBase58 implementations, including this one, use Bitcoin's alphabet as the default. The Flickr alphabet differs from the Bitcoin alphabet in that\nthe Flickr alphabet has the lowercase letters preeceding the uppercase letters.\n\n`123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ`\n","summary":"<p>The modern usage of Base58 can be traced back to 2009.</p>","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/base58/alphabet/flickr.cr","line_number":12,"url":null},"def":{"name":"inverse?","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"byte = UIntToBase[val]?\nbyte && (byte != 0) ? byte : nil\n"}}]},{"html_id":"base58/Base58/Alphabet/IPFS","path":"Base58/Alphabet/IPFS.html","kind":"class","full_name":"Base58::Alphabet::IPFS","name":"IPFS","abstract":false,"superclass":{"html_id":"base58/Base58/Alphabet/Bitcoin","kind":"class","full_name":"Base58::Alphabet::Bitcoin","name":"Bitcoin"},"ancestors":[{"html_id":"base58/Base58/Alphabet/Bitcoin","kind":"class","full_name":"Base58::Alphabet::Bitcoin","name":"Bitcoin"},{"html_id":"base58/Base58/Alphabet","kind":"class","full_name":"Base58::Alphabet","name":"Alphabet"},{"html_id":"base58/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"base58/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/base58/alphabet/ipfs.cr","line_number":7,"url":null}],"repository_name":"base58","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"base58/Base58/Alphabet","kind":"class","full_name":"Base58::Alphabet","name":"Alphabet"},"doc":"[IPFS](https://github.com/richardschneider/net-ipfs-core#base58) uses Base58. Some sources refer to its\nimplementation as distinct, but it is actually just the Bitcoin implementation.","summary":"<p><a href=\"https://github.com/richardschneider/net-ipfs-core#base58\">IPFS</a> uses Base58.</p>","class_methods":[{"html_id":"[](val)-class-method","name":"[]","doc":"[IPFS](https://github.com/richardschneider/net-ipfs-core#base58) uses Base58. Some sources refer to its\nimplementation as distinct, but it is actually just the Bitcoin implementation.","summary":"<p><a href=\"https://github.com/richardschneider/net-ipfs-core#base58\">IPFS</a> uses Base58.</p>","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/base58/alphabet/ipfs.cr","line_number":7,"url":null},"def":{"name":"[]","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"BaseToUInt[val]"}},{"html_id":"[]?(val)-class-method","name":"[]?","doc":"[IPFS](https://github.com/richardschneider/net-ipfs-core#base58) uses Base58. Some sources refer to its\nimplementation as distinct, but it is actually just the Bitcoin implementation.","summary":"<p><a href=\"https://github.com/richardschneider/net-ipfs-core#base58\">IPFS</a> uses Base58.</p>","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/base58/alphabet/ipfs.cr","line_number":7,"url":null},"def":{"name":"[]?","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"BaseToUInt[val]?"}},{"html_id":"inverse(val)-class-method","name":"inverse","doc":"[IPFS](https://github.com/richardschneider/net-ipfs-core#base58) uses Base58. Some sources refer to its\nimplementation as distinct, but it is actually just the Bitcoin implementation.","summary":"<p><a href=\"https://github.com/richardschneider/net-ipfs-core#base58\">IPFS</a> uses Base58.</p>","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/base58/alphabet/ipfs.cr","line_number":7,"url":null},"def":{"name":"inverse","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"UIntToBase[val]"}},{"html_id":"inverse?(val)-class-method","name":"inverse?","doc":"[IPFS](https://github.com/richardschneider/net-ipfs-core#base58) uses Base58. Some sources refer to its\nimplementation as distinct, but it is actually just the Bitcoin implementation.","summary":"<p><a href=\"https://github.com/richardschneider/net-ipfs-core#base58\">IPFS</a> uses Base58.</p>","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/base58/alphabet/ipfs.cr","line_number":7,"url":null},"def":{"name":"inverse?","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"byte = UIntToBase[val]?\nbyte && (byte != 0) ? byte : nil\n"}}]},{"html_id":"base58/Base58/Alphabet/Monero","path":"Base58/Alphabet/Monero.html","kind":"class","full_name":"Base58::Alphabet::Monero","name":"Monero","abstract":false,"superclass":{"html_id":"base58/Base58/Alphabet","kind":"class","full_name":"Base58::Alphabet","name":"Alphabet"},"ancestors":[{"html_id":"base58/Base58/Alphabet","kind":"class","full_name":"Base58::Alphabet","name":"Alphabet"},{"html_id":"base58/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"base58/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/base58/alphabet/monero.cr","line_number":17,"url":null}],"repository_name":"base58","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"BaseToUInt","name":"BaseToUInt","value":"UInt8.static_array(49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122)"},{"id":"UIntToBase","name":"UIntToBase","value":"UInt8.static_array(0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 9, 10, 11, 12, 13, 14, 15, 16, 0_u8, 17, 18, 19, 20, 21, 0_u8, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0_u8, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8)"}],"namespace":{"html_id":"base58/Base58/Alphabet","kind":"class","full_name":"Base58::Alphabet","name":"Alphabet"},"doc":"Not to be outdone in the Base58 customizations competition, Monero has another unique spin on the base58 alphabet.\nWith Monero, the base alphabet is the same at the Bitcoin alphabet, but when encoding, Monero breaks the input\ninto 8-byte chunks, encoding each chunk separately, and padding to 11 bytes if the result is shorter than 11, except\nfor the last chunk, which will only be padded to the maximum possible size for the given bitcount of that chunk.\nDecoding reverses this process.\n\nNormally, base58 encoding results in some instability in the length of the final encoded values, but the Monero\napproach eliminates that instability. This, for example, Monero addresses, which are 69 bytes, will always encode\nto a 95 byte string.\n\n`123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz`\n","summary":"<p>Not to be outdone in the Base58 customizations competition, Monero has another unique spin on the base58 alphabet.</p>","class_methods":[{"html_id":"[](val)-class-method","name":"[]","doc":"Not to be outdone in the Base58 customizations competition, Monero has another unique spin on the base58 alphabet.\nWith Monero, the base alphabet is the same at the Bitcoin alphabet, but when encoding, Monero breaks the input\ninto 8-byte chunks, encoding each chunk separately, and padding to 11 bytes if the result is shorter than 11, except\nfor the last chunk, which will only be padded to the maximum possible size for the given bitcount of that chunk.\nDecoding reverses this process.\n\nNormally, base58 encoding results in some instability in the length of the final encoded values, but the Monero\napproach eliminates that instability. This, for example, Monero addresses, which are 69 bytes, will always encode\nto a 95 byte string.\n\n`123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz`\n","summary":"<p>Not to be outdone in the Base58 customizations competition, Monero has another unique spin on the base58 alphabet.</p>","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/base58/alphabet/monero.cr","line_number":17,"url":null},"def":{"name":"[]","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"BaseToUInt[val]"}},{"html_id":"[]?(val)-class-method","name":"[]?","doc":"Not to be outdone in the Base58 customizations competition, Monero has another unique spin on the base58 alphabet.\nWith Monero, the base alphabet is the same at the Bitcoin alphabet, but when encoding, Monero breaks the input\ninto 8-byte chunks, encoding each chunk separately, and padding to 11 bytes if the result is shorter than 11, except\nfor the last chunk, which will only be padded to the maximum possible size for the given bitcount of that chunk.\nDecoding reverses this process.\n\nNormally, base58 encoding results in some instability in the length of the final encoded values, but the Monero\napproach eliminates that instability. This, for example, Monero addresses, which are 69 bytes, will always encode\nto a 95 byte string.\n\n`123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz`\n","summary":"<p>Not to be outdone in the Base58 customizations competition, Monero has another unique spin on the base58 alphabet.</p>","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/base58/alphabet/monero.cr","line_number":17,"url":null},"def":{"name":"[]?","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"BaseToUInt[val]?"}},{"html_id":"inverse(val)-class-method","name":"inverse","doc":"Not to be outdone in the Base58 customizations competition, Monero has another unique spin on the base58 alphabet.\nWith Monero, the base alphabet is the same at the Bitcoin alphabet, but when encoding, Monero breaks the input\ninto 8-byte chunks, encoding each chunk separately, and padding to 11 bytes if the result is shorter than 11, except\nfor the last chunk, which will only be padded to the maximum possible size for the given bitcount of that chunk.\nDecoding reverses this process.\n\nNormally, base58 encoding results in some instability in the length of the final encoded values, but the Monero\napproach eliminates that instability. This, for example, Monero addresses, which are 69 bytes, will always encode\nto a 95 byte string.\n\n`123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz`\n","summary":"<p>Not to be outdone in the Base58 customizations competition, Monero has another unique spin on the base58 alphabet.</p>","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/base58/alphabet/monero.cr","line_number":17,"url":null},"def":{"name":"inverse","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"UIntToBase[val]"}},{"html_id":"inverse?(val)-class-method","name":"inverse?","doc":"Not to be outdone in the Base58 customizations competition, Monero has another unique spin on the base58 alphabet.\nWith Monero, the base alphabet is the same at the Bitcoin alphabet, but when encoding, Monero breaks the input\ninto 8-byte chunks, encoding each chunk separately, and padding to 11 bytes if the result is shorter than 11, except\nfor the last chunk, which will only be padded to the maximum possible size for the given bitcount of that chunk.\nDecoding reverses this process.\n\nNormally, base58 encoding results in some instability in the length of the final encoded values, but the Monero\napproach eliminates that instability. This, for example, Monero addresses, which are 69 bytes, will always encode\nto a 95 byte string.\n\n`123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz`\n","summary":"<p>Not to be outdone in the Base58 customizations competition, Monero has another unique spin on the base58 alphabet.</p>","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/base58/alphabet/monero.cr","line_number":17,"url":null},"def":{"name":"inverse?","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"byte = UIntToBase[val]?\nbyte && (byte != 0) ? byte : nil\n"}}]},{"html_id":"base58/Base58/Alphabet/Ripple","path":"Base58/Alphabet/Ripple.html","kind":"class","full_name":"Base58::Alphabet::Ripple","name":"Ripple","abstract":false,"superclass":{"html_id":"base58/Base58/Alphabet","kind":"class","full_name":"Base58::Alphabet","name":"Alphabet"},"ancestors":[{"html_id":"base58/Base58/Alphabet","kind":"class","full_name":"Base58::Alphabet","name":"Alphabet"},{"html_id":"base58/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"base58/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/base58/alphabet/ripple.cr","line_number":12,"url":null}],"repository_name":"base58","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"BaseToUInt","name":"BaseToUInt","value":"UInt8.static_array(114, 112, 115, 104, 110, 97, 102, 51, 57, 119, 66, 85, 68, 78, 69, 71, 72, 74, 75, 76, 77, 52, 80, 81, 82, 83, 84, 55, 86, 87, 88, 89, 90, 50, 98, 99, 100, 101, 67, 103, 54, 53, 106, 107, 109, 56, 111, 70, 113, 105, 49, 116, 117, 118, 65, 120, 121, 122)"},{"id":"UIntToBase","name":"UIntToBase","value":"UInt8.static_array(0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 50, 33, 7, 21, 41, 40, 27, 45, 8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 54, 10, 38, 12, 14, 47, 15, 16, 0_u8, 17, 18, 19, 20, 13, 0_u8, 22, 23, 24, 25, 26, 11, 28, 29, 30, 31, 32, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 5, 34, 35, 36, 37, 6, 39, 3, 49, 42, 43, 0_u8, 44, 4, 46, 1, 48, 0, 2, 51, 52, 53, 9, 55, 56, 57, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8, 0_u8)"}],"namespace":{"html_id":"base58/Base58/Alphabet","kind":"class","full_name":"Base58::Alphabet","name":"Alphabet"},"doc":"The Ripple alphabet is a fun beast. The order of the characters in it are distinctly strange compared to\nthe straightforward order with Bitcoin and Flickr. However, the order was chosen to support human readability\nof commonly encoded Ripple values. Some historical perspective can be found at:\n[https://web.archive.org/web/20170210105346/https://wiki.ripple.com/Encodings](https://web.archive.org/web/20170210105346/https://wiki.ripple.com/Encodings)\n\n`rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz`\n","summary":"<p>The Ripple alphabet is a fun beast.</p>","class_methods":[{"html_id":"[](val)-class-method","name":"[]","doc":"The Ripple alphabet is a fun beast. The order of the characters in it are distinctly strange compared to\nthe straightforward order with Bitcoin and Flickr. However, the order was chosen to support human readability\nof commonly encoded Ripple values. Some historical perspective can be found at:\n[https://web.archive.org/web/20170210105346/https://wiki.ripple.com/Encodings](https://web.archive.org/web/20170210105346/https://wiki.ripple.com/Encodings)\n\n`rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz`\n","summary":"<p>The Ripple alphabet is a fun beast.</p>","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/base58/alphabet/ripple.cr","line_number":12,"url":null},"def":{"name":"[]","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"BaseToUInt[val]"}},{"html_id":"[]?(val)-class-method","name":"[]?","doc":"The Ripple alphabet is a fun beast. The order of the characters in it are distinctly strange compared to\nthe straightforward order with Bitcoin and Flickr. However, the order was chosen to support human readability\nof commonly encoded Ripple values. Some historical perspective can be found at:\n[https://web.archive.org/web/20170210105346/https://wiki.ripple.com/Encodings](https://web.archive.org/web/20170210105346/https://wiki.ripple.com/Encodings)\n\n`rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz`\n","summary":"<p>The Ripple alphabet is a fun beast.</p>","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/base58/alphabet/ripple.cr","line_number":12,"url":null},"def":{"name":"[]?","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"BaseToUInt[val]?"}},{"html_id":"inverse(val)-class-method","name":"inverse","doc":"The Ripple alphabet is a fun beast. The order of the characters in it are distinctly strange compared to\nthe straightforward order with Bitcoin and Flickr. However, the order was chosen to support human readability\nof commonly encoded Ripple values. Some historical perspective can be found at:\n[https://web.archive.org/web/20170210105346/https://wiki.ripple.com/Encodings](https://web.archive.org/web/20170210105346/https://wiki.ripple.com/Encodings)\n\n`rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz`\n","summary":"<p>The Ripple alphabet is a fun beast.</p>","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/base58/alphabet/ripple.cr","line_number":12,"url":null},"def":{"name":"inverse","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"UIntToBase[val]"}},{"html_id":"inverse?(val)-class-method","name":"inverse?","doc":"The Ripple alphabet is a fun beast. The order of the characters in it are distinctly strange compared to\nthe straightforward order with Bitcoin and Flickr. However, the order was chosen to support human readability\nof commonly encoded Ripple values. Some historical perspective can be found at:\n[https://web.archive.org/web/20170210105346/https://wiki.ripple.com/Encodings](https://web.archive.org/web/20170210105346/https://wiki.ripple.com/Encodings)\n\n`rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz`\n","summary":"<p>The Ripple alphabet is a fun beast.</p>","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/base58/alphabet/ripple.cr","line_number":12,"url":null},"def":{"name":"inverse?","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"byte = UIntToBase[val]?\nbyte && (byte != 0) ? byte : nil\n"}}]}]},{"html_id":"base58/Base58/Check","path":"Base58/Check.html","kind":"struct","full_name":"Base58::Check","name":"Check","abstract":false,"superclass":{"html_id":"base58/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"base58/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"base58/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"base58/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/base58.cr","line_number":28,"url":null}],"repository_name":"base58","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"base58/Base58","kind":"module","full_name":"Base58","name":"Base58"},"doc":"Use this structure to specify that some form of checksumming should be used with the encoding or the decoding.\n\n```\nBase58.encode(\"some data\", check: Base58::Check.new(:Base58Check, \"\\x31\"))\n```\n","summary":"<p>Use this structure to specify that some form of checksumming should be used with the encoding or the decoding.</p>","constructors":[{"html_id":"new(prefix:String=\"1\",type:Checksum=:Base58Check)-class-method","name":"new","abstract":false,"args":[{"name":"prefix","default_value":"\"1\"","external_name":"prefix","restriction":"String"},{"name":"type","default_value":":Base58Check","external_name":"type","restriction":"Checksum"}],"args_string":"(prefix : String = \"1\", type : Checksum = :Base58Check)","args_html":"(prefix : <a href=\"../String.html\">String</a> = <span class=\"s\">&quot;1&quot;</span>, type : <a href=\"../Base58/Checksum.html\">Checksum</a> = <span class=\"n\">:Base58Check</span>)","location":{"filename":"src/base58.cr","line_number":28,"url":null},"def":{"name":"new","args":[{"name":"prefix","default_value":"\"1\"","external_name":"prefix","restriction":"String"},{"name":"type","default_value":":Base58Check","external_name":"type","restriction":"Checksum"}],"visibility":"Public","body":"_ = allocate\n_.initialize(prefix, type)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/base58.cr","line_number":28,"url":null},"def":{"name":"clone","visibility":"Public","body":"self.class.new(@prefix.clone, @type.clone)"}},{"html_id":"copy_with(prefix_prefix=@prefix,type_type=@type)-instance-method","name":"copy_with","abstract":false,"args":[{"name":"_prefix","default_value":"@prefix","external_name":"prefix","restriction":""},{"name":"_type","default_value":"@type","external_name":"type","restriction":""}],"args_string":"(prefix _prefix = @prefix, type _type = @type)","args_html":"(prefix _prefix = @prefix, type _type = @type)","location":{"filename":"src/base58.cr","line_number":28,"url":null},"def":{"name":"copy_with","args":[{"name":"_prefix","default_value":"@prefix","external_name":"prefix","restriction":""},{"name":"_type","default_value":"@type","external_name":"type","restriction":""}],"visibility":"Public","body":"self.class.new(_prefix, _type)"}},{"html_id":"prefix:String-instance-method","name":"prefix","abstract":false,"def":{"name":"prefix","return_type":"String","visibility":"Public","body":"@prefix"}},{"html_id":"type:Checksum-instance-method","name":"type","abstract":false,"def":{"name":"type","return_type":"Checksum","visibility":"Public","body":"@type"}}]},{"html_id":"base58/Base58/Checksum","path":"Base58/Checksum.html","kind":"enum","full_name":"Base58::Checksum","name":"Checksum","abstract":false,"ancestors":[{"html_id":"base58/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"base58/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"base58/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"base58/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/base58.cr","line_number":17,"url":null}],"repository_name":"base58","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Base58Check","name":"Base58Check","value":"0"},{"id":"CB58","name":"CB58","value":"1"}],"namespace":{"html_id":"base58/Base58","kind":"module","full_name":"Base58","name":"Base58"},"doc":"There are two checksum variants that are supported.\n\n* [Base58Check](https://en.bitcoin.it/wiki/Base58Check_encoding) is the checksum algorithm used by Bitcoin. It combines an (optional) version/prefix to\nthe front of the data payload, the first 4 characters of the SHA256 hash of the SHA256 has of the\nchecksum + data combination before Base58 encoding.\n\n* [CB58](https://support.avax.network/en/articles/4587395-what-is-cb58)\n","summary":"<p>There are two checksum variants that are supported.</p>","instance_methods":[{"html_id":"base58_check?-instance-method","name":"base58_check?","abstract":false,"location":{"filename":"src/base58.cr","line_number":18,"url":null},"def":{"name":"base58_check?","visibility":"Public","body":"self == Base58Check"}},{"html_id":"cb58?-instance-method","name":"cb58?","abstract":false,"location":{"filename":"src/base58.cr","line_number":19,"url":null},"def":{"name":"cb58?","visibility":"Public","body":"self == CB58"}}]},{"html_id":"base58/Base58/ChecksumMismatch","path":"Base58/ChecksumMismatch.html","kind":"class","full_name":"Base58::ChecksumMismatch","name":"ChecksumMismatch","abstract":false,"superclass":{"html_id":"base58/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"base58/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"base58/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"base58/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/base58.cr","line_number":32,"url":null}],"repository_name":"base58","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"base58/Base58","kind":"module","full_name":"Base58","name":"Base58"}},{"html_id":"base58/Base58/Decoder","path":"Base58/Decoder.html","kind":"struct","full_name":"Base58::Decoder","name":"Decoder","abstract":false,"superclass":{"html_id":"base58/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"base58/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"base58/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"base58/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/base58/decoder.cr","line_number":365,"url":null}],"repository_name":"base58","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"base58/Base58","kind":"module","full_name":"Base58","name":"Base58"},"class_methods":[{"html_id":"[](value)-class-method","name":"[]","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/base58/decoder.cr","line_number":384,"url":null},"def":{"name":"[]","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"Base58.decode(value)"}},{"html_id":"into(into)-class-method","name":"into","abstract":false,"args":[{"name":"into","external_name":"into","restriction":""}],"args_string":"(into)","args_html":"(into)","location":{"filename":"src/base58/decoder.cr","line_number":389,"url":null},"def":{"name":"into","args":[{"name":"into","external_name":"into","restriction":""}],"visibility":"Public","body":"Into.new(into)"}},{"html_id":"valid?(value:UInt8,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"valid?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"UInt8"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : UInt8, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : UInt8, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":393,"url":null},"def":{"name":"valid?","args":[{"name":"value","external_name":"value","restriction":"UInt8"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"valid_for({value.chr}, alphabet)"}},{"html_id":"valid?(value:Char,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"valid?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Char"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Char, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : <a href=\"../Char.html\">Char</a>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":397,"url":null},"def":{"name":"valid?","args":[{"name":"value","external_name":"value","restriction":"Char"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"valid_for({value}, alphabet)"}},{"html_id":"valid?(value:String,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"valid?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : String, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : <a href=\"../String.html\">String</a>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":401,"url":null},"def":{"name":"valid?","args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"valid_for(value.to_slice, alphabet)"}},{"html_id":"valid?(value:Enumerable,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"valid?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Enumerable"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Enumerable, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Enumerable, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":405,"url":null},"def":{"name":"valid?","args":[{"name":"value","external_name":"value","restriction":"Enumerable"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"valid_for(value, alphabet)"}},{"html_id":"valid?(value:StringBuffer,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"valid?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"StringBuffer"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : StringBuffer, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : <a href=\"../StringBuffer.html\">StringBuffer</a>, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":409,"url":null},"def":{"name":"valid?","args":[{"name":"value","external_name":"value","restriction":"StringBuffer"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"valid_for(value.buffer.to_slice, alphabet)"}},{"html_id":"valid?(value:Pointer(UInt8),size:Int,alphabet:Alphabet.class=Alphabet::Bitcoin)-class-method","name":"valid?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value : Pointer(UInt8), size : Int, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value : Pointer(UInt8), size : Int, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":413,"url":null},"def":{"name":"valid?","args":[{"name":"value","external_name":"value","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int"},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"valid_for(PointerCollection.new(value, size), alphabet)"}},{"html_id":"valid_for(value:Enumerable,alphabet)-class-method","name":"valid_for","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Enumerable"},{"name":"alphabet","external_name":"alphabet","restriction":""}],"args_string":"(value : Enumerable, alphabet)","args_html":"(value : Enumerable, alphabet)","location":{"filename":"src/base58/decoder.cr","line_number":418,"url":null},"def":{"name":"valid_for","args":[{"name":"value","external_name":"value","restriction":"Enumerable"},{"name":"alphabet","external_name":"alphabet","restriction":""}],"visibility":"Public","body":"value.all? do |byte|\n  alphabet.inverse?(byte)\nend"}}],"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/base58/decoder.cr","line_number":365,"url":null},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/base58/decoder.cr","line_number":365,"url":null},"def":{"name":"initialize","visibility":"Public","body":""}}],"types":[{"html_id":"base58/Base58/Decoder/Into","path":"Base58/Decoder/Into.html","kind":"struct","full_name":"Base58::Decoder::Into","name":"Into","abstract":false,"superclass":{"html_id":"base58/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"base58/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"base58/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"base58/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/base58/decoder.cr","line_number":366,"url":null}],"repository_name":"base58","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"base58/Base58/Decoder","kind":"struct","full_name":"Base58::Decoder","name":"Decoder"},"constructors":[{"html_id":"new(into)-class-method","name":"new","abstract":false,"args":[{"name":"into","external_name":"into","restriction":""}],"args_string":"(into)","args_html":"(into)","location":{"filename":"src/base58/decoder.cr","line_number":369,"url":null},"def":{"name":"new","args":[{"name":"into","external_name":"into","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(into)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](value,alphabet:Alphabet.class=Alphabet::Bitcoin)-instance-method","name":"[]","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":378,"url":null},"def":{"name":"[]","args":[{"name":"value","external_name":"value","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"decode(value, @into, alphabet)"}},{"html_id":"decode(value,alphabet:Alphabet.class=Alphabet::Bitcoin)-instance-method","name":"decode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/decoder.cr","line_number":373,"url":null},"def":{"name":"decode","args":[{"name":"value","external_name":"value","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"Base58.decode(value, @into, alphabet)"}}]}]},{"html_id":"base58/Base58/Encoder","path":"Base58/Encoder.html","kind":"struct","full_name":"Base58::Encoder","name":"Encoder","abstract":false,"superclass":{"html_id":"base58/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"base58/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"base58/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"base58/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/base58/encoder.cr","line_number":668,"url":null}],"repository_name":"base58","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"base58/Base58","kind":"module","full_name":"Base58","name":"Base58"},"class_methods":[{"html_id":"[](value)-class-method","name":"[]","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/base58/encoder.cr","line_number":687,"url":null},"def":{"name":"[]","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"Base58.encode(value)"}},{"html_id":"into(into)-class-method","name":"into","abstract":false,"args":[{"name":"into","external_name":"into","restriction":""}],"args_string":"(into)","args_html":"(into)","location":{"filename":"src/base58/encoder.cr","line_number":692,"url":null},"def":{"name":"into","args":[{"name":"into","external_name":"into","restriction":""}],"visibility":"Public","body":"Into.new(into)"}}],"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/base58/encoder.cr","line_number":668,"url":null},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/base58/encoder.cr","line_number":668,"url":null},"def":{"name":"initialize","visibility":"Public","body":""}}],"types":[{"html_id":"base58/Base58/Encoder/Into","path":"Base58/Encoder/Into.html","kind":"struct","full_name":"Base58::Encoder::Into","name":"Into","abstract":false,"superclass":{"html_id":"base58/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"base58/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"base58/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"base58/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/base58/encoder.cr","line_number":669,"url":null}],"repository_name":"base58","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"base58/Base58/Encoder","kind":"struct","full_name":"Base58::Encoder","name":"Encoder"},"constructors":[{"html_id":"new(into)-class-method","name":"new","abstract":false,"args":[{"name":"into","external_name":"into","restriction":""}],"args_string":"(into)","args_html":"(into)","location":{"filename":"src/base58/encoder.cr","line_number":672,"url":null},"def":{"name":"new","args":[{"name":"into","external_name":"into","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(into)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](value,alphabet:Alphabet.class=Alphabet::Bitcoin)-instance-method","name":"[]","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":681,"url":null},"def":{"name":"[]","args":[{"name":"value","external_name":"value","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"encode(value, @into, alphabet)"}},{"html_id":"encode(value,alphabet:Alphabet.class=Alphabet::Bitcoin)-instance-method","name":"encode","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"args_string":"(value, alphabet : Alphabet.class = Alphabet::Bitcoin)","args_html":"(value, alphabet : <span class=\"t\">Alphabet</span>.<span class=\"k\">class</span> = <span class=\"t\">Alphabet</span><span class=\"t\">::</span><span class=\"t\">Bitcoin</span>)","location":{"filename":"src/base58/encoder.cr","line_number":676,"url":null},"def":{"name":"encode","args":[{"name":"value","external_name":"value","restriction":""},{"name":"alphabet","default_value":"Alphabet::Bitcoin","external_name":"alphabet","restriction":"Alphabet.class"}],"visibility":"Public","body":"Base58.encode(value, @into, alphabet)"}}]}]},{"html_id":"base58/Base58/PointerCollection","path":"Base58/PointerCollection.html","kind":"struct","full_name":"Base58::PointerCollection","name":"PointerCollection","abstract":false,"superclass":{"html_id":"base58/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"base58/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"base58/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"base58/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"base58/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/base58/pointer_collection.cr","line_number":10,"url":null}],"repository_name":"base58","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"base58/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"}],"namespace":{"html_id":"base58/Base58","kind":"module","full_name":"Base58","name":"Base58"},"doc":"This is essentially a lightweight Slice. It exists only to provide an Enumerable\ninterface to a Pointer. The jury is still out on whether there is any point to this\nversus just using Slice. I did some quick benchmarks to justify this, but there needs\nto be more due diligence.\n\nTo use this, you need to pass in a pointer, the size of the pointer, and optionally\nthe starting position within the pointer. It is up to you to ensure that the size\nof the pointer is accurate. No other bounds checking will be done.","summary":"<p>This is essentially a lightweight Slice.</p>","constructors":[{"html_id":"new(pointer:Pointer(UInt8),size:Int32,position:Int32=0)-class-method","name":"new","abstract":false,"args":[{"name":"pointer","external_name":"pointer","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"position","default_value":"0","external_name":"position","restriction":"::Int32"}],"args_string":"(pointer : Pointer(UInt8), size : Int32, position : Int32 = 0)","args_html":"(pointer : Pointer(UInt8), size : Int32, position : Int32 = <span class=\"n\">0</span>)","location":{"filename":"src/base58/pointer_collection.cr","line_number":16,"url":null},"def":{"name":"new","args":[{"name":"pointer","external_name":"pointer","restriction":"Pointer(UInt8)"},{"name":"size","external_name":"size","restriction":"Int32"},{"name":"position","default_value":"0","external_name":"position","restriction":"::Int32"}],"visibility":"Public","body":"_ = allocate\n_.initialize(pointer, size, position)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"each(&)-instance-method","name":"each","doc":"Must yield this collection's elements to the block.","summary":"<p>Must yield this collection's elements to the block.</p>","abstract":false,"location":{"filename":"src/base58/pointer_collection.cr","line_number":19,"url":null},"def":{"name":"each","yields":1,"block_arity":1,"visibility":"Public","body":"while @position < @size\n  yield @pointer[@position]\n  @position = @position + 1\nend"}},{"html_id":"pointer:Pointer(UInt8)-instance-method","name":"pointer","abstract":false,"location":{"filename":"src/base58/pointer_collection.cr","line_number":12,"url":null},"def":{"name":"pointer","return_type":"Pointer(UInt8)","visibility":"Public","body":"@pointer"}},{"html_id":"position:Int32-instance-method","name":"position","abstract":false,"location":{"filename":"src/base58/pointer_collection.cr","line_number":14,"url":null},"def":{"name":"position","return_type":"Int32","visibility":"Public","body":"@position"}},{"html_id":"size:Int32-instance-method","name":"size","doc":"Returns the number of elements in the collection.\n\n```\n[1, 2, 3, 4].size # => 4\n```","summary":"<p>Returns the number of elements in the collection.</p>","abstract":false,"location":{"filename":"src/base58/pointer_collection.cr","line_number":13,"url":null},"def":{"name":"size","return_type":"Int32","visibility":"Public","body":"@size"}}]}]},{"html_id":"base58/Benchmark","path":"Benchmark.html","kind":"module","full_name":"Benchmark","name":"Benchmark","abstract":false,"locations":[{"filename":"src/base58/extensions/benchmark.cr","line_number":4,"url":null}],"repository_name":"base58","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"base58/Benchmark","kind":"module","full_name":"Benchmark","name":"Benchmark"}],"doc":"The Benchmark module provides methods for benchmarking Crystal code, giving\ndetailed reports on the time and memory taken for each task.\n\n### Measure the number of iterations per second of each task\n\n```\nrequire \"benchmark\"\n\nBenchmark.ips do |x|\n  x.report(\"short sleep\") { sleep 0.01 }\n  x.report(\"shorter sleep\") { sleep 0.001 }\nend\n```\n\nThis generates the following output showing the mean iterations per second,\nthe mean times per iteration, the standard deviation relative to the mean, and a comparison:\n\n```text\n  short sleep   88.7  ( 11.27ms) (± 3.33%)  8.90× slower\nshorter sleep  789.7  (  1.27ms) (± 3.02%)       fastest\n```\n\n`Benchmark::IPS` defaults to 2 seconds of warmup time and 5 seconds of\ncalculation time. This can be configured:\n\n```\nrequire \"benchmark\"\n\nBenchmark.ips(warmup: 4, calculation: 10) do |x|\n  x.report(\"sleep\") { sleep 0.01 }\nend\n```\n\n### Measure the time to construct the string given by the expression: `\"a\"*1_000_000_000`\n\n```\nrequire \"benchmark\"\n\nputs Benchmark.measure { \"a\"*1_000_000_000 }\n```\n\nThis generates the following output:\n\n```text\n 0.190000   0.220000   0.410000 (  0.420185)\n```\n\nThis report shows the user CPU time, system CPU time, the sum of\nthe user and system CPU times, and the elapsed real time. The unit\nof time is seconds.\n\n### Do some experiments sequentially using the `#bm` method:\n\n```\nrequire \"benchmark\"\n\nn = 5000000\nBenchmark.bm do |x|\n  x.report(\"times:\") do\n    n.times do\n      a = \"1\"\n    end\n  end\n  x.report(\"upto:\") do\n    1.upto(n) do\n      a = \"1\"\n    end\n  end\nend\n```\n\nThe result:\n\n```text\n           user     system      total        real\ntimes:   0.010000   0.000000   0.010000 (  0.008976)\nupto:    0.010000   0.000000   0.010000 (  0.010466)\n```\n\nNOTE: Make sure to always benchmark code by compiling with the `--release` flag.","summary":"<p>The Benchmark module provides methods for benchmarking Crystal code, giving detailed reports on the time and memory taken for each task.</p>","class_methods":[{"html_id":"ips(calculation=5,warmup=2,interactive=STDOUT.tty?,&)-class-method","name":"ips","abstract":false,"args":[{"name":"calculation","default_value":"5","external_name":"calculation","restriction":""},{"name":"warmup","default_value":"2","external_name":"warmup","restriction":""},{"name":"interactive","default_value":"STDOUT.tty?","external_name":"interactive","restriction":""}],"args_string":"(calculation = 5, warmup = 2, interactive = STDOUT.tty?, &)","args_html":"(calculation = <span class=\"n\">5</span>, warmup = <span class=\"n\">2</span>, interactive = <span class=\"t\">STDOUT</span>.tty?, &)","location":{"filename":"src/base58/extensions/benchmark.cr","line_number":5,"url":null},"def":{"name":"ips","args":[{"name":"calculation","default_value":"5","external_name":"calculation","restriction":""},{"name":"warmup","default_value":"2","external_name":"warmup","restriction":""},{"name":"interactive","default_value":"STDOUT.tty?","external_name":"interactive","restriction":""}],"yields":1,"block_arity":1,"visibility":"Public","body":"{% if !(flag?(:release)) %}\n      puts \"Warning: benchmarking without the `--release` flag won't yield useful results\"\n    {% end %}\njob = ::Benchmark::IPS::Job.new(calculation, warmup, interactive)\nyield job\njob.execute\njob.report\njob\n"}}],"types":[{"html_id":"base58/Benchmark/IPS","path":"Benchmark/IPS.html","kind":"module","full_name":"Benchmark::IPS","name":"IPS","abstract":false,"locations":[{"filename":"src/base58/extensions/benchmark.cr","line_number":17,"url":null}],"repository_name":"base58","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"base58/Benchmark","kind":"module","full_name":"Benchmark","name":"Benchmark"},"doc":"Benchmark IPS calculates the number of iterations per second for a given\nblock of code. The strategy is to use two stages: a warmup stage and a\ncalculation stage.\n\nThe warmup phase defaults to 2 seconds. During this stage we figure out how\nmany cycles are needed to run the block for roughly 100ms, and record it.\n\nThe calculation defaults to 5 seconds. During this stage we run the block\nin sets of the size calculated in the warmup stage. The measurements for\nthose sets are then used to calculate the mean and standard deviation,\nwhich are then reported. Additionally we compare the means to that of the\nfastest.","summary":"<p>Benchmark IPS calculates the number of iterations per second for a given block of code.</p>","types":[{"html_id":"base58/Benchmark/IPS/Entry","path":"Benchmark/IPS/Entry.html","kind":"class","full_name":"Benchmark::IPS::Entry","name":"Entry","abstract":false,"superclass":{"html_id":"base58/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"base58/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"base58/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/base58/extensions/benchmark.cr","line_number":18,"url":null}],"repository_name":"base58","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"base58/Benchmark/IPS","kind":"module","full_name":"Benchmark::IPS","name":"IPS"},"constructors":[{"html_id":"new(label:String,action:Proc(Nil))-class-method","name":"new","abstract":false,"args":[{"name":"label","external_name":"label","restriction":"String"},{"name":"action","external_name":"action","restriction":"Proc(Nil)"}],"args_string":"(label : String, action : Proc(Nil))","args_html":"(label : <a href=\"../../String.html\">String</a>, action : Proc(Nil))","location":{"filename":"src/base58/extensions/benchmark.cr","line_number":27,"url":null},"def":{"name":"new","args":[{"name":"label","external_name":"label","restriction":"String"},{"name":"action","external_name":"action","restriction":"Proc(Nil)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(label, action)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(label:String|Colorize::Object(String),action:Int32->_|->_)-class-method","name":"new","abstract":false,"args":[{"name":"label","external_name":"label","restriction":"String | Colorize::Object(String)"},{"name":"action","external_name":"action","restriction":"(::Int32 -> _) | ( -> _)"}],"args_string":"(label : String | Colorize::Object(String), action : Int32 -> _ |  -> _)","args_html":"(label : <a href=\"../../String.html\">String</a> | <a href=\"../../Colorize/Object.html\">Colorize::Object</a>(<a href=\"../../String.html\">String</a>), action : Int32 -> _ |  -> _)","location":{"filename":"src/base58/extensions/benchmark.cr","line_number":24,"url":null},"def":{"name":"new","args":[{"name":"label","external_name":"label","restriction":"String | Colorize::Object(String)"},{"name":"action","external_name":"action","restriction":"(::Int32 -> _) | ( -> _)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(label, action)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"action:Proc(Int32,Nil)|Proc(Nil)-instance-method","name":"action","doc":"Code to be benchmarked","summary":"<p>Code to be benchmarked</p>","abstract":false,"location":{"filename":"src/base58/extensions/benchmark.cr","line_number":22,"url":null},"def":{"name":"action","return_type":"Proc(Int32, Nil) | Proc(Nil)","visibility":"Public","body":"@action"}},{"html_id":"action=(action:Proc(Int32,Nil)|Proc(Nil))-instance-method","name":"action=","abstract":false,"args":[{"name":"action","external_name":"action","restriction":"Proc(Int32, Nil) | Proc(Nil)"}],"args_string":"(action : Proc(Int32, Nil) | Proc(Nil))","args_html":"(action : Proc(Int32, Nil) | Proc(Nil))","location":{"filename":"src/base58/extensions/benchmark.cr","line_number":22,"url":null},"def":{"name":"action=","args":[{"name":"action","external_name":"action","restriction":"Proc(Int32, Nil) | Proc(Nil)"}],"visibility":"Public","body":"@action = action"}},{"html_id":"calculate_stats(samples):Nil-instance-method","name":"calculate_stats","abstract":false,"args":[{"name":"samples","external_name":"samples","restriction":""}],"args_string":"(samples) : Nil","args_html":"(samples) : Nil","location":{"filename":"src/base58/extensions/benchmark.cr","line_number":38,"url":null},"def":{"name":"calculate_stats","args":[{"name":"samples","external_name":"samples","restriction":""}],"return_type":"Nil","visibility":"Public","body":"if separator?\n  @ran = true\n  @size = 0\n  @mean = 0\n  @variance = 0\n  @stddev = 0\n  @relative_stddev = 0\n  @slower = 0\n  @bytes_per_op = 0\nelse\n  @ran = true\n  @size = samples.size\n  @mean = samples.sum.to_f / size.to_f\n  @variance = (samples.reduce(0) do |acc, i|\n    acc + ((i - mean) ** 2)\n  end).to_f / size.to_f\n  @stddev = Math.sqrt(variance)\n  @relative_stddev = 100.0 * (stddev / mean)\nend"}},{"html_id":"call:Nil-instance-method","name":"call","abstract":false,"location":{"filename":"src/base58/extensions/benchmark.cr","line_number":30,"url":null},"def":{"name":"call","return_type":"Nil","visibility":"Public","body":"(@action.as(Proc(Nil))).call"}},{"html_id":"call_for_100ms:Nil-instance-method","name":"call_for_100ms","abstract":false,"location":{"filename":"src/base58/extensions/benchmark.cr","line_number":34,"url":null},"def":{"name":"call_for_100ms","return_type":"Nil","visibility":"Public","body":"cycles.times do\n  call\nend"}},{"html_id":"label:String|Colorize::Object(String)-instance-method","name":"label","doc":"Label of the benchmark","summary":"<p>Label of the benchmark</p>","abstract":false,"location":{"filename":"src/base58/extensions/benchmark.cr","line_number":19,"url":null},"def":{"name":"label","return_type":"String | Colorize::Object(String)","visibility":"Public","body":"@label"}},{"html_id":"label=(label:String|Colorize::Object(String))-instance-method","name":"label=","abstract":false,"args":[{"name":"label","external_name":"label","restriction":"String | Colorize::Object(String)"}],"args_string":"(label : String | Colorize::Object(String))","args_html":"(label : <a href=\"../../String.html\">String</a> | <a href=\"../../Colorize/Object.html\">Colorize::Object</a>(<a href=\"../../String.html\">String</a>))","location":{"filename":"src/base58/extensions/benchmark.cr","line_number":19,"url":null},"def":{"name":"label=","args":[{"name":"label","external_name":"label","restriction":"String | Colorize::Object(String)"}],"visibility":"Public","body":"@label = label"}},{"html_id":"ran=(ran:Bool)-instance-method","name":"ran=","abstract":false,"args":[{"name":"ran","external_name":"ran","restriction":"Bool"}],"args_string":"(ran : Bool)","args_html":"(ran : Bool)","location":{"filename":"src/base58/extensions/benchmark.cr","line_number":21,"url":null},"def":{"name":"ran=","args":[{"name":"ran","external_name":"ran","restriction":"Bool"}],"visibility":"Public","body":"@ran = ran"}},{"html_id":"separator=(separator:Bool)-instance-method","name":"separator=","abstract":false,"args":[{"name":"separator","external_name":"separator","restriction":"Bool"}],"args_string":"(separator : Bool)","args_html":"(separator : Bool)","location":{"filename":"src/base58/extensions/benchmark.cr","line_number":20,"url":null},"def":{"name":"separator=","args":[{"name":"separator","external_name":"separator","restriction":"Bool"}],"visibility":"Public","body":"@separator = separator"}},{"html_id":"separator?:Bool-instance-method","name":"separator?","abstract":false,"location":{"filename":"src/base58/extensions/benchmark.cr","line_number":20,"url":null},"def":{"name":"separator?","return_type":"Bool","visibility":"Public","body":"@separator"}}]},{"html_id":"base58/Benchmark/IPS/Job","path":"Benchmark/IPS/Job.html","kind":"class","full_name":"Benchmark::IPS::Job","name":"Job","abstract":false,"superclass":{"html_id":"base58/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"base58/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"base58/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/base58/extensions/benchmark.cr","line_number":59,"url":null}],"repository_name":"base58","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"base58/Benchmark/IPS","kind":"module","full_name":"Benchmark::IPS","name":"IPS"},"constructors":[{"html_id":"new(calculation=5,warmup=2,interactive=STDOUT.tty?)-class-method","name":"new","abstract":false,"args":[{"name":"calculation","default_value":"5","external_name":"calculation","restriction":""},{"name":"warmup","default_value":"2","external_name":"warmup","restriction":""},{"name":"interactive","default_value":"STDOUT.tty?","external_name":"interactive","restriction":""}],"args_string":"(calculation = 5, warmup = 2, interactive = STDOUT.tty?)","args_html":"(calculation = <span class=\"n\">5</span>, warmup = <span class=\"n\">2</span>, interactive = <span class=\"t\">STDOUT</span>.tty?)","location":{"filename":"src/base58/extensions/benchmark.cr","line_number":60,"url":null},"def":{"name":"new","args":[{"name":"calculation","default_value":"5","external_name":"calculation","restriction":""},{"name":"warmup","default_value":"2","external_name":"warmup","restriction":""},{"name":"interactive","default_value":"STDOUT.tty?","external_name":"interactive","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(calculation, warmup, interactive)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"execute:Nil-instance-method","name":"execute","abstract":false,"location":{"filename":"src/base58/extensions/benchmark.cr","line_number":84,"url":null},"def":{"name":"execute","return_type":"Nil","visibility":"Public","body":"run_warmup\nrun_calculation\nrun_comparison\n"}},{"html_id":"report:Nil-instance-method","name":"report","abstract":false,"location":{"filename":"src/base58/extensions/benchmark.cr","line_number":90,"url":null},"def":{"name":"report","return_type":"Nil","visibility":"Public","body":"if @interactive\n  print(\"\\e[2J\\e[H\")\nend\nmax_label = ran_items.max_of do |item|\n  count_non_control_characters(item.label)\nend\nmax_compare = ran_items.max_of do |__arg0|\n  __arg0.human_compare.size\nend\nmax_bytes_per_op = ran_items.max_of do |__arg1|\n  __arg1.bytes_per_op.humanize(base: 1024).size\nend\nran_items.each do |item|\n  if item.separator?\n    printf(\"%s\\n\", (\"\".rjust(max_label - (count_non_control_characters(item.label)))) + item.label.to_s)\n    (item.action.as(Proc(Int32, Nil))).call(max_label)\n  else\n    fastest = item.human_compare == \"fastest\"\n    printf(\"%s %s (%s) (±%5.2f%%)  %sB/op  %s\\n\", (\"\".rjust(max_label - (count_non_control_characters(item.label)))) + item.label.to_s, item.human_mean, item.human_iteration_time, item.relative_stddev, item.bytes_per_op.humanize(base: 1024).rjust(max_bytes_per_op), @interactive && fastest ? (\"\".rjust(max_compare - 7)) + \"fastest\".colorize.green.bold.to_s : item.human_compare.rjust(max_compare))\n  end\nend\n"}},{"html_id":"separator(label):Benchmark::IPS::Entry-instance-method","name":"separator","abstract":false,"args":[{"name":"label","external_name":"label","restriction":""}],"args_string":"(label) : Benchmark::IPS::Entry","args_html":"(label) : <a href=\"../../Benchmark/IPS/Entry.html\">Benchmark::IPS::Entry</a>","location":{"filename":"src/base58/extensions/benchmark.cr","line_number":68,"url":null},"def":{"name":"separator","args":[{"name":"label","external_name":"label","restriction":""}],"return_type":"Benchmark::IPS::Entry","visibility":"Public","body":"item = Entry.new(label, ->(x : Int32) do\nend)\nitem.separator = true\n@items << item\nitem\n"}},{"html_id":"separator(label,&action:Proc(Int32,Nil)):Benchmark::IPS::Entry-instance-method","name":"separator","abstract":false,"args":[{"name":"label","external_name":"label","restriction":""}],"args_string":"(label, &action : Proc(Int32, Nil)) : Benchmark::IPS::Entry","args_html":"(label, &action : Proc(Int32, Nil)) : <a href=\"../../Benchmark/IPS/Entry.html\">Benchmark::IPS::Entry</a>","location":{"filename":"src/base58/extensions/benchmark.cr","line_number":76,"url":null},"def":{"name":"separator","args":[{"name":"label","external_name":"label","restriction":""}],"yields":0,"block_arity":0,"block_arg":{"name":"action","external_name":"action","restriction":"Proc(Int32, Nil)"},"return_type":"Benchmark::IPS::Entry","visibility":"Public","body":"item = Entry.new(label, action)\nitem.separator = true\n@items << item\nitem\n"}}]}]}]},{"html_id":"base58/Char","path":"Char.html","kind":"struct","full_name":"Char","name":"Char","abstract":false,"superclass":{"html_id":"base58/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"base58/Steppable","kind":"module","full_name":"Steppable","name":"Steppable"},{"html_id":"base58/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"base58/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"base58/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/base58/extensions/char.cr","line_number":1,"url":null}],"repository_name":"base58","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"base58/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"base58/Steppable","kind":"module","full_name":"Steppable","name":"Steppable"}],"doc":"A `Char` represents a [Unicode](http://en.wikipedia.org/wiki/Unicode) [code point](http://en.wikipedia.org/wiki/Code_point).\nIt occupies 32 bits.\n\nIt is created by enclosing an UTF-8 character in single quotes.\n\n```\n'a'\n'z'\n'0'\n'_'\n'あ'\n```\n\nYou can use a backslash to denote some characters:\n\n```\n'\\'' # single quote\n'\\\\' # backslash\n'\\e' # escape\n'\\f' # form feed\n'\\n' # newline\n'\\r' # carriage return\n'\\t' # tab\n'\\v' # vertical tab\n```\n\nYou can use a backslash followed by an *u* and four hexadecimal characters to denote a unicode codepoint written:\n\n```\n'\\u0041' # == 'A'\n```\n\nOr you can use curly braces and specify up to four hexadecimal numbers:\n\n```\n'\\u{41}' # == 'A'\n```\n\nSee [`Char` literals](https://crystal-lang.org/reference/syntax_and_semantics/literals/char.html) in the language reference.","summary":"<p>A <code><a href=\"Char.html\">Char</a></code> represents a <a href=\"http://en.wikipedia.org/wiki/Unicode\">Unicode</a> <a href=\"http://en.wikipedia.org/wiki/Code_point\">code point</a>.</p>","macros":[{"html_id":"static_array(*nums)-macro","name":"static_array","abstract":false,"args":[{"name":"nums","external_name":"nums","restriction":""}],"args_string":"(*nums)","args_html":"(*nums)","location":{"filename":"src/base58/extensions/char.cr","line_number":2,"url":null},"def":{"name":"static_array","args":[{"name":"nums","external_name":"nums","restriction":""}],"splat_index":0,"visibility":"Public","body":"    \n%array\n = uninitialized StaticArray(\n{{ @type }}\n, \n{{ nums.size }}\n)\n    \n{% for num, i in nums %}\n      %array.to_unsafe[{{ i }}] = {{ num }}\n    {% end %}\n\n    \n%array\n\n  \n"}}]},{"html_id":"base58/Colorize","path":"Colorize.html","kind":"module","full_name":"Colorize","name":"Colorize","abstract":false,"locations":[{"filename":"src/base58/extensions/colorize.cr","line_number":1,"url":null}],"repository_name":"base58","program":false,"enum":false,"alias":false,"const":false,"doc":"With `Colorize` you can change the fore- and background colors and text decorations when rendering text\non terminals supporting ANSI escape codes. It adds the `colorize` method to `Object` and thus all classes\nas its main interface, which calls `to_s` and surrounds it with the necessary escape codes\nwhen it comes to obtaining a string representation of the object.\n\nIts first argument changes the foreground color:\n\n```\nrequire \"colorize\"\n\n\"foo\".colorize(:green)\n100.colorize(:red)\n[1, 2, 3].colorize(:blue)\n```\n\nThere are alternative ways to change the foreground color:\n\n```\nrequire \"colorize\"\n\n\"foo\".colorize.fore(:green)\n\"foo\".colorize.green\n```\n\nTo change the background color, the following methods are available:\n\n```\nrequire \"colorize\"\n\n\"foo\".colorize.back(:green)\n\"foo\".colorize.on(:green)\n\"foo\".colorize.on_green\n```\n\nYou can also pass an RGB color to `colorize`:\n\n```\nrequire \"colorize\"\n\n\"foo\".colorize(0, 255, 255)      # => \"foo\" in aqua\n\"foo\".colorize.fore(0, 255, 255) # => \"foo\" in aqua\n\n# This is the same as:\n\n\"foo\".colorize(Colorize::ColorRGB.new(0, 255, 255))      # => \"foo\" in aqua\n\"foo\".colorize.fore(Colorize::ColorRGB.new(0, 255, 255)) # => \"foo\" in aqua\n```\n\nOr an 8-bit color:\n\n```\nrequire \"colorize\"\n\n\"foo\".colorize(Colorize::Color256.new(208))      # => \"foo\" in orange\n\"foo\".colorize.fore(Colorize::Color256.new(208)) # => \"foo\" in orange\n```\n\nIt's also possible to change the text decoration:\n\n```\nrequire \"colorize\"\n\n\"foo\".colorize.mode(:underline)\n\"foo\".colorize.underline\n```\n\nThe `colorize` method returns a `Colorize::Object` instance,\nwhich allows chaining methods together:\n\n```\nrequire \"colorize\"\n\n\"foo\".colorize.fore(:yellow).back(:blue).mode(:underline)\n```\n\nWith the `toggle` method you can temporarily disable adding the escape codes.\nSettings of the instance are preserved however and can be turned back on later:\n\n```\nrequire \"colorize\"\n\n\"foo\".colorize(:red).toggle(false)              # => \"foo\" without color\n\"foo\".colorize(:red).toggle(false).toggle(true) # => \"foo\" in red\n```\n\nThe color `:default` leaves the object's representation as it is but the object is a `Colorize::Object` then\nwhich is handy in conditions such as:\n\n```\nrequire \"colorize\"\n\n\"foo\".colorize(Random::DEFAULT.next_bool ? :green : :default)\n```\n\nAvailable colors are:\n```\n:default\n:black\n:red\n:green\n:yellow\n:blue\n:magenta\n:cyan\n:light_gray\n:dark_gray\n:light_red\n:light_green\n:light_yellow\n:light_blue\n:light_magenta\n:light_cyan\n:white\n```\n\nSee `Colorize::Mode` for available text decorations.","summary":"<p>With <code><a href=\"Colorize.html\">Colorize</a></code> you can change the fore- and background colors and text decorations when rendering text on terminals supporting ANSI escape codes.</p>","types":[{"html_id":"base58/Colorize/Object","path":"Colorize/Object.html","kind":"struct","full_name":"Colorize::Object(T)","name":"Object","abstract":false,"superclass":{"html_id":"base58/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"base58/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"base58/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"base58/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/base58/extensions/colorize.cr","line_number":2,"url":null}],"repository_name":"base58","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"base58/Colorize","kind":"module","full_name":"Colorize","name":"Colorize"},"doc":"A colorized object. Colors and text decorations can be modified.","summary":"<p>A colorized object.</p>","instance_methods":[{"html_id":"mode(mode:Symbol):self-instance-method","name":"mode","abstract":false,"args":[{"name":"mode","external_name":"mode","restriction":"Symbol"}],"args_string":"(mode : Symbol) : self","args_html":"(mode : Symbol) : <span class=\"k\">self</span>","location":{"filename":"src/base58/extensions/colorize.cr","line_number":5,"url":null},"def":{"name":"mode","args":[{"name":"mode","external_name":"mode","restriction":"Symbol"}],"return_type":"self","visibility":"Public","body":"{% if true %}\n        case mode\n        {% for name in MODES %}\n        when :{{ name.id }}\n          mode(Mode::{{ name.capitalize.id }})\n        {% end %}\n        end\n      {% end %}\nreturn self\n"}}],"macros":[{"html_id":"method_missing(call)-macro","name":"method_missing","abstract":false,"args":[{"name":"call","external_name":"call","restriction":""}],"args_string":"(call)","args_html":"(call)","location":{"filename":"src/base58/extensions/colorize.cr","line_number":3,"url":null},"def":{"name":"method_missing","args":[{"name":"call","external_name":"call","restriction":""}],"visibility":"Public","body":"      @object.\n{{ call }}\n\n    \n"}}]}]},{"html_id":"base58/StaticArray","path":"StaticArray.html","kind":"struct","full_name":"StaticArray(T, N)","name":"StaticArray","abstract":false,"superclass":{"html_id":"base58/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"base58/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"},{"html_id":"base58/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"base58/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"base58/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"base58/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"base58/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"base58/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/base58/extensions/slice.cr","line_number":1,"url":null}],"repository_name":"base58","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"base58/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"base58/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"}],"doc":"A fixed-size, stack allocated array.\n\n`StaticArray` is a generic type with type argument `T` specifying the type of\nits elements and `N` the fixed size. For example `StaticArray(Int32, 3)`\nis a static array of `Int32` with three elements.\n\nInstantiations of this static array type:\n\n```\nStaticArray(Int32, 3).new(42)           # => StaticArray[42, 42, 42]\nStaticArray(Int32, 3).new { |i| i * 2 } # => StaticArray[0, 2, 4]\nStaticArray[0, 8, 15]                   # => StaticArray[0, 8, 15]\n```\n\nThis type can also be expressed as `Int32[3]` (only in type grammar). A typical use\ncase is in combination with `uninitialized`:\n\n```\nints = uninitialized Int32[3]\nints[0] = 0\nints[1] = 8\nints[2] = 15\n```\n\nFor number types there is also `Number.static_array` which can be used to initialize\na static array:\n\n```\nInt32.static_array(0, 8, 15) # => StaticArray[0, 8, 15]\n```\n\nThe generic argument type `N` is a special case in the type grammar as it\ndoesn't specify a type but a size. Its value can be an `Int32` literal or\nconstant.","summary":"<p>A fixed-size, stack allocated array.</p>","instance_methods":[{"html_id":"to_slice(bytes)-instance-method","name":"to_slice","abstract":false,"args":[{"name":"bytes","external_name":"bytes","restriction":""}],"args_string":"(bytes)","args_html":"(bytes)","location":{"filename":"src/base58/extensions/slice.cr","line_number":2,"url":null},"def":{"name":"to_slice","args":[{"name":"bytes","external_name":"bytes","restriction":""}],"visibility":"Public","body":"Slice(T).new(to_unsafe, bytes)"}}]},{"html_id":"base58/String","path":"String.html","kind":"class","full_name":"String","name":"String","abstract":false,"superclass":{"html_id":"base58/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"base58/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"base58/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"base58/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/base58/extensions/string.cr","line_number":1,"url":null}],"repository_name":"base58","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"base58/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"doc":"A `String` represents an immutable sequence of UTF-8 characters.\n\nA `String` is typically created with a string literal, enclosing UTF-8 characters\nin double quotes:\n\n```\n\"hello world\"\n```\n\nSee [`String` literals](https://crystal-lang.org/reference/syntax_and_semantics/literals/string.html) in the language reference.\n\nA backslash can be used to denote some characters inside the string:\n\n```\n\"\\\"\" # double quote\n\"\\\\\" # backslash\n\"\\e\" # escape\n\"\\f\" # form feed\n\"\\n\" # newline\n\"\\r\" # carriage return\n\"\\t\" # tab\n\"\\v\" # vertical tab\n```\n\nYou can use a backslash followed by an *u* and four hexadecimal characters to denote a unicode codepoint written:\n\n```\n\"\\u0041\" # == \"A\"\n```\n\nOr you can use curly braces and specify up to six hexadecimal numbers (0 to 10FFFF):\n\n```\n\"\\u{41}\" # == \"A\"\n```\n\nA string can span multiple lines:\n\n```\n\"hello\n      world\" # same as \"hello\\n      world\"\n```\n\nNote that in the above example trailing and leading spaces, as well as newlines,\nend up in the resulting string. To avoid this, you can split a string into multiple lines\nby joining multiple literals with a backslash:\n\n```\n\"hello \" \\\n\"world, \" \\\n\"no newlines\" # same as \"hello world, no newlines\"\n```\n\nAlternatively, a backslash followed by a newline can be inserted inside the string literal:\n\n```\n\"hello \\\n     world, \\\n     no newlines\" # same as \"hello world, no newlines\"\n```\n\nIn this case, leading whitespace is not included in the resulting string.\n\nIf you need to write a string that has many double quotes, parentheses, or similar\ncharacters, you can use alternative literals:\n\n```\n# Supports double quotes and nested parentheses\n%(hello (\"world\")) # same as \"hello (\\\"world\\\")\"\n\n# Supports double quotes and nested brackets\n%[hello [\"world\"]] # same as \"hello [\\\"world\\\"]\"\n\n# Supports double quotes and nested curlies\n%{hello {\"world\"}} # same as \"hello {\\\"world\\\"}\"\n\n# Supports double quotes and nested angles\n%<hello <\"world\">> # same as \"hello <\\\"world\\\">\"\n```\n\nTo create a `String` with embedded expressions, you can use string interpolation:\n\n```\na = 1\nb = 2\n\"sum = #{a + b}\" # \"sum = 3\"\n```\n\nThis ends up invoking `Object#to_s(IO)` on each expression enclosed by `#{...}`.\n\nIf you need to dynamically build a string, use `String#build` or `IO::Memory`.\n\n### Non UTF-8 valid strings\n\nString might end up being conformed of bytes which are an invalid\nbyte sequence according to UTF-8. This can happen if the string is created\nvia one of the constructors that accept bytes, or when getting a string\nfrom `String.build` or `IO::Memory`. No exception will be raised, but\ninvalid byte sequences, when asked as chars, will use the unicode replacement\nchar (value 0xFFFD). For example:\n\n```\n# here 255 is not a valid byte value in the UTF-8 encoding\nstring = String.new(Bytes[255, 97])\nstring.valid_encoding? # => false\n\n# The first char here is the unicode replacement char\nstring.chars # => ['�', 'a']\n```\n\nOne can also create strings with specific byte value in them by\nusing octal and hexadecimal escape sequences:\n\n```\n# Octal escape sequences\n\"\\101\" # # => \"A\"\n\"\\12\"  # # => \"\\n\"\n\"\\1\"   # string with one character with code point 1\n\"\\377\" # string with one byte with value 255\n\n# Hexadecimal escape sequences\n\"\\x41\" # # => \"A\"\n\"\\xFF\" # string with one byte with value 255\n```\n\nThe reason for allowing strings that don't have a valid UTF-8 sequence\nis that the world is full of content that isn't properly encoded,\nand having a program raise an exception or stop because of this\nis not good. It's better if programs are more resilient, but\nshow a replacement character when there's an error in incoming data.","summary":"<p>A <code><a href=\"String.html\">String</a></code> represents an immutable sequence of UTF-8 characters.</p>","constructors":[{"html_id":"new(string:String)-class-method","name":"new","abstract":false,"args":[{"name":"string","external_name":"string","restriction":"String"}],"args_string":"(string : String)","args_html":"(string : <a href=\"String.html\">String</a>)","location":{"filename":"src/base58/extensions/string.cr","line_number":10,"url":null},"def":{"name":"new","args":[{"name":"string","external_name":"string","restriction":"String"}],"visibility":"Public","body":"new(string.to_slice)"}},{"html_id":"new(size:Int)-class-method","name":"new","abstract":false,"args":[{"name":"size","external_name":"size","restriction":"Int"}],"args_string":"(size : Int)","args_html":"(size : Int)","location":{"filename":"src/base58/extensions/string.cr","line_number":14,"url":null},"def":{"name":"new","args":[{"name":"size","external_name":"size","restriction":"Int"}],"visibility":"Public","body":"new(size) do |ptr|\n  {size, size}\nend"}}],"macros":[{"html_id":"static_array(*nums)-macro","name":"static_array","abstract":false,"args":[{"name":"nums","external_name":"nums","restriction":""}],"args_string":"(*nums)","args_html":"(*nums)","location":{"filename":"src/base58/extensions/string.cr","line_number":2,"url":null},"def":{"name":"static_array","args":[{"name":"nums","external_name":"nums","restriction":""}],"splat_index":0,"visibility":"Public","body":"    \n%array\n = uninitialized StaticArray(\n{{ @type }}\n, \n{{ nums.size }}\n)\n    \n{% for num, i in nums %}\n      %array.to_unsafe[{{ i }}] = {{ num }}\n    {% end %}\n\n    \n%array\n\n  \n"}}]},{"html_id":"base58/StringBuffer","path":"StringBuffer.html","kind":"class","full_name":"StringBuffer","name":"StringBuffer","abstract":false,"superclass":{"html_id":"base58/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"base58/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"base58/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/base58/extensions/string.cr","line_number":22,"url":null}],"repository_name":"base58","program":false,"enum":false,"alias":false,"const":false,"doc":"This provides a very efficient reusable StringBuffer.","summary":"<p>This provides a very efficient reusable StringBuffer.</p>","constructors":[{"html_id":"new(string:String)-class-method","name":"new","abstract":false,"args":[{"name":"string","external_name":"string","restriction":"String"}],"args_string":"(string : String)","args_html":"(string : <a href=\"String.html\">String</a>)","location":{"filename":"src/base58/extensions/string.cr","line_number":26,"url":null},"def":{"name":"new","args":[{"name":"string","external_name":"string","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(string)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(string:Slice(UInt8))-class-method","name":"new","abstract":false,"args":[{"name":"string","external_name":"string","restriction":"Slice(UInt8)"}],"args_string":"(string : Slice(UInt8))","args_html":"(string : Slice(UInt8))","location":{"filename":"src/base58/extensions/string.cr","line_number":31,"url":null},"def":{"name":"new","args":[{"name":"string","external_name":"string","restriction":"Slice(UInt8)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(string)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(capacity:Int=256)-class-method","name":"new","abstract":false,"args":[{"name":"capacity","default_value":"256","external_name":"capacity","restriction":"Int"}],"args_string":"(capacity : Int = 256)","args_html":"(capacity : Int = <span class=\"n\">256</span>)","location":{"filename":"src/base58/extensions/string.cr","line_number":36,"url":null},"def":{"name":"new","args":[{"name":"capacity","default_value":"256","external_name":"capacity","restriction":"Int"}],"visibility":"Public","body":"_ = allocate\n_.initialize(capacity)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<<(val)-instance-method","name":"<<","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/base58/extensions/string.cr","line_number":55,"url":null},"def":{"name":"<<","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"mutate(val)"}},{"html_id":"buffer:String-instance-method","name":"buffer","abstract":false,"location":{"filename":"src/base58/extensions/string.cr","line_number":60,"url":null},"def":{"name":"buffer","visibility":"Public","body":"@buffer"}},{"html_id":"capacity:Int32|Nil-instance-method","name":"capacity","abstract":false,"location":{"filename":"src/base58/extensions/string.cr","line_number":23,"url":null},"def":{"name":"capacity","return_type":"Int32 | ::Nil","visibility":"Public","body":"@capacity"}},{"html_id":"mutate(val)-instance-method","name":"mutate","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/base58/extensions/string.cr","line_number":45,"url":null},"def":{"name":"mutate","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"limit = val.size < @capacity ? val.size : @capacity\n((@buffer.as(::Pointer(UInt8))) + String::HEADER_SIZE).copy_from(val.to_s.to_slice.to_unsafe, limit)\nheader = @buffer.as(::Pointer(::Tuple(Int32, Int32, Int32)))\nheader.value = {String::TYPE_ID, limit, limit}\n@buffer\n"}},{"html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":"Appends a short String representation of this object\nwhich includes its class name and its object address.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).to_s # => #<Person:0x10a199f20>\n```","summary":"<p>Appends a short String representation of this object which includes its class name and its object address.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/base58/extensions/string.cr","line_number":65,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io << @buffer"}}],"macros":[{"html_id":"method_missing(call)-macro","name":"method_missing","abstract":false,"args":[{"name":"call","external_name":"call","restriction":""}],"args_string":"(call)","args_html":"(call)","location":{"filename":"src/base58/extensions/string.cr","line_number":69,"url":null},"def":{"name":"method_missing","args":[{"name":"call","external_name":"call","restriction":""}],"visibility":"Public","body":"      @buffer.\n{{ call }}\n\n    \n"}}]}]}}